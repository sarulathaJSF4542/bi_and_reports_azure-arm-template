@inject IUserManagement userManagement
@{
    var globalAppSettings = _globalAppSettings;
    var identityResponse = Context.RequestServices.GetRequiredService<ServerPrincipal>();
    var tenantAppConfig = new TenantAppConfiguration(globalAppSettings);
    var isMobile = new DeviceDetection(Context).IsMobile;
    Layout = null;
    ViewBag.Title = ViewBag.ItemName + " - [[[View Dashboard]]] -" + globalAppSettings.SystemSettings.OrganizationName;
    var baseUrl = ViewBag.BaseUrl;
    var dashboardServiceUrl = globalAppSettings.SystemSettings.InternalAppDataServiceUrl;
    var dashboardServiceResourceUrl = globalAppSettings.SystemSettings.DashboardServiceResourceUrl;
    var isDebug = globalAppSettings.SystemSettings.IsDebug;
    var itemLocation = ViewBag.ItemLocation as string;
    itemLocation = itemLocation.Replace("\\", "\\\\");
    var enableComment = "true";
    ItemDetail itemDetail = new ItemDetail();
    itemDetail = ViewBag.itemDetail;
    var itemId = ViewBag.ItemId;
    var parentId = ViewBag.ParentId;
    var isAuthenticated = "false";
    var isPublic = globalAppSettings.SystemSettings.IsMarkItemsPublic && itemDetail.IsPublic ? "true" : "false";
    var _itemId = ViewBag.IsMultiDashboard ? parentId : itemId;
    ViewBag.DateFormat = globalAppSettings.SystemSettings.DateFormat;
    ViewBag.TimeFormat = globalAppSettings.SystemSettings.TimeFormat ? "HH:mm" : "hh:mm tt";
    var enableView = "true";
    var accessToken = ViewBag.AccessToken;
    var iframeLoaded = "false";
    var externalLogin = Context.Request.Query["externallogin"];
    var hasSSO = Context.Request.Query["hassso"];
    var userId = 0;
    var userName = "";
    var faviconLogo = globalAppSettings.SystemSettings.FavIcon;
    var requestUrl = new Uri(Context.Request.GetDisplayUrl());
    var dashboardServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
}
<!DOCTYPE html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="@faviconLogo" onerror="if (this.href != '@globalAppSettings.SystemSettings.CDNLink/images/application/@ServerAppConfig.AppSettings.AppBranding.Identifier/@IconFileNames.Favicon') this.href = '@globalAppSettings.SystemSettings.CDNLink/images/application/@ServerAppConfig.AppSettings.AppBranding.Identifier/@IconFileNames.Favicon';" />

    <title>@ViewBag.Title</title>
    @if (isDebug)
    {
        <link rel="stylesheet" type="text/css" href="@(dashboardServiceResourceUrl + "/themes/default-theme/ej.dashboardviewer.all.min.css")" />
    }

    @if (isDebug)
    {
        <link rel="stylesheet" type="text/css" href="@(dashboardServiceResourceUrl + "/themes/default-theme/ej.dashboardviewer.all.min.css")" />
    }
    <environment include="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/viewer/themes/default-theme/ej.dashboardviewer.all.css" />
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/viewer/themes/default-theme/ej.dashboardviewer.all.min.css" />
    </environment>

    @if (isMobile)
    {
        <environment include="Development,CloudDevelopment">
            <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/file-render-dashboard-mobile.css" />
        </environment>
        <environment exclude="Development,CloudDevelopment">
            <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/file-render-dashboard-mobile.min.css" />
        </environment>
    }
    else
    {
        <environment include="Development,CloudDevelopment">
            <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/file-render-dashboard.css" />
        </environment>
        <environment exclude="Development,CloudDevelopment">
            <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/file-render-dashboard.min.css" />
        </environment>
    }
    <environment include="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/viewer/dashboard-viewer-v1-dependency.js"></script>
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/viewer/dashboard-viewer-v1-all.js"></script>
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/viewer/dashboard-viewer-v1-common-all.js"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/viewer/dashboard-viewer-v1-dependency.min.js"></script>
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/viewer/dashboard-viewer-v1-all.min.js"></script>
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/viewer/dashboard-viewer-v1-common-all.min.js"></script>
    </environment>

    @if (isMobile)
    {
        <environment include="Development,CloudDevelopment">
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/viewer/dashboard-viewer-v1-mobile-utilities.js"></script>
        </environment>
        <environment exclude="Development,CloudDevelopment">
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/viewer/dashboard-viewer-v1-mobile-utilities.min.js"></script>
        </environment>

    }
    else
    {
        <environment include="Development,CloudDevelopment">
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/viewer/dashboard-viewer-v1-utilities.js"></script>
        </environment>
        <environment exclude="Development,CloudDevelopment">
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/viewer/dashboard-viewer-v1-utilities.min.js"></script>
        </environment>

    }
    <script>window.destroyAll = function () { try { ej.widget.destroyAll($('.e-js').off()); } catch (e) { } $(document.body).html('-'); CollectGarbage(); };</script>
    @if (isDebug)
    {
        <script asp-append-version="true" src="@(dashboardServiceResourceUrl + "/scripts/jquery-1.10.2.min.js")"></script>
        <script asp-append-version="true" src="@(dashboardServiceResourceUrl + "/scripts/jquery.easing.1.3.min.js")"></script>
        <script asp-append-version="true" src="@(dashboardServiceResourceUrl + "/scripts/ej.dashboard.ejcommon.all.min.js")"></script>
        <script asp-append-version="true" src="@(dashboardServiceResourceUrl + "/scripts/ej.dashboard.viewer.all.min.js")"></script>
    }

    <style>
        html {
            height: 100%;
        }

        #dashboard{
            margin-right: 30px;
        }

         #dashboard_WaitingPopup{
             height: 100% !important;
             width: 100% !important;
             background-color: #fff !important;
         }

        .icon {
            text-align: center;
        }

         #dashboard_WaitingPopup .e-image {
            background: url('@(globalAppSettings.SystemSettings.CDNLink + "/images/waitingpopup.gif")') no-repeat scroll 0px 18px transparent;
            top : 350px !important;
        }

    </style>

    @await Html.PartialAsync("~/Views/Shared/_LoaderIcon.cshtml")

    <script>
    var itemViewShareIframeUrl = "@Url.Action("shareItemView", "items")";
    var favoriteItemUrl = "@Url.Action("MakeFavorite", "Items")";
    var addViewUrl = "@Url.Action("onfiltersave", "DashboardViews")";
    var getSavedViewUrl = "@Url.Action("GetViews", "DashboardViews")";
    var getViewParameterUrl = "@Url.Action("GetDashboardViewParameter", "DashboardViews")";
    var deleteViewUrl = "@Url.Action("DeleteView", "DashboardViews")";
    var updateViewUrl = "@Url.Action("UpdateView", "DashboardViews")";
    var pinWidgetToHomepageUrl = "@Url.Action("PinWidgetToHomepage", "Boards")";
    var saveViewPopup = "@Url.Action("SaveView", "DashboardViews")";
    var commentPageUrl = "@Url.Action("CommentPartialView", "Comments")";
    var Commentswidgets = "@Url.Action("WidgetCommentPartialView", "Comments")";
    var viewUrl = "@Url.Action("Dashboards", "Dashboards")";
    var externalLogin = "@externalLogin";
    var embeddedLoginUrl = "@Url.Action("EmbeddedLogin", "Accounts")";
	var sso = "@hasSSO";
	var comment = "";
	var view = "";
    var commentSettings = {
            isDashboardCommented: @Html.Raw(ViewBag.IsDashboardCommented),
            widgets: [@Html.Raw(ViewBag.CommentedWidgets)]
        };
        function loadPopup() {
            var dashboardRenderWaitingPopupTemplateId = createLoader("dashboard");
			$("#dashboard").ejWaitingPopup({ template:$("#" + dashboardRenderWaitingPopupTemplateId) });
            $("#dashboard").ejWaitingPopup("show");
            window.location.href = window.location.href.replace(window.location.pathname + window.location.search, "");
        }
        function CommentImageDialogClose() {
            $("#commentImage_popup").ejDialog("close");
            $("#commentImage_popup_image").attr('src', "");
        }
    </script>
    @{
        if (!string.IsNullOrWhiteSpace(Context.Request.Query["hascomments"]) && Context.Request.Query["hascomments"].ToString().ToLower() == "true")
        {
            enableComment = "true";
        }
        else
        {
            enableComment = "false";
        }
        if (!string.IsNullOrWhiteSpace(Context.Request.Query["hasviews"]) && Context.Request.Query["hasviews"].ToString().ToLower() == "true")
        {
            enableView = "true";
        }
        else
        {
            enableView = "false";
        }
        if (Context.User.Identity.IsAuthenticated)
        {
            userId = Convert.ToInt32(identityResponse.User.UserId);
            userName = identityResponse.User.Email;
        }
    }

</head>
<body style="width: 100%; height: 100%; overflow: hidden">
    <environment include="Development,CloudDevelopment">
        <script asp-append-version="true" src="~/js/localizationcontent.js?c=@System.Globalization.CultureInfo.CurrentCulture" defer></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <script asp-append-version="true" src="~/js/localizationcontent.js?c=@System.Globalization.CultureInfo.CurrentCulture" defer></script>
    </environment>
    <input id="favorite_Item" type="hidden" data-item-id="@ViewBag.ItemId" data-parent-id="@ViewBag.ParentId" data-favorite-value="@ViewBag.IsFavorite">
    <input id="dashboard_Comment" type="hidden" data-item-id="@ViewBag.ItemId">
    <input id="isMultiDashboard" type="hidden" data-item-id="@ViewBag.IsMultiDashboard" data-parent-id="@ViewBag.ParentId">
    <input id="is_mobile" type="hidden" value="@isMobile.ToString().ToLower()">
    <input id="comment_Type" type="hidden" data-item-id="@ViewBag.DataItemId" data-item-type="@ViewBag.ItemType">
    <div id="dashboard" style="height: 100%;"></div>
    @if (isMobile)
    {
        <script>
            $(document)
                .ready(function() {
                    //Remove side bar
                    $("ul.options").addClass("displayNone");
                    $("#filter-view").css("display", "none");
                    $("#dashboard-view-toogle").css("display", "none");
                    if(@enableView == false && @enableComment == false){
                        $("#comment-li").remove();
                        $("#view-li").html("");
                        $(".navbar-nav li").removeClass("col-xs-3").addClass("col-xs-6");
                    }
                    else if(@enableComment == false){
                        $("#comment-li").remove();
                        $(".navbar-nav li").removeClass("col-xs-3").addClass("col-xs-4");
                    }
                    else if(@enableView == false){
                        $("#view-li").html("");
                        $(".navbar-nav li").removeClass("col-xs-3").addClass("col-xs-4");
                    }
                });
        </script>

        <nav id="server-mobile-navbar" class="navbar navbar-inverse">
            <div class="container-fluid">
                <ul class="nav navbar-nav col-xs-12 no-padding no-margin">
                    <li class="col-xs-3 icon">
                        <a href="javascript:void(0)" class="su su-nav-dashboard active"></a>
                    </li>
                    <li class="col-xs-3 icon" id="comment-li">
                        @if (ViewBag.IsDashboardCommented == "true")
                        {
                            <a href="javascript:void(0)" class="su su-with-comment server-comment"></a>
                        }
                        else
                        {
                            <a href="javascript:void(0)" class="su su-without-comment server-comment"></a>
                        }
                    </li>
                    <li class="col-xs-3 icon">
                        <a href="javascript:void(0)" class="su su-filter server-item-view"></a>
                    </li>
                    <li class="col-xs-3 icon" id="view-li">
                        <a href="javascript:void(0)" class="su-view"></a>
                    </li>
                </ul>
            </div>
        </nav>
    }
    @await Html.PartialAsync("_DashboardViews")

    <div id="commentModuleContainer" class="displayNone" style="background-image: url('@(globalAppSettings.SystemSettings.CDNLink + "/images/waitingpopup.gif")'); background-color: #fff; background-repeat: no-repeat; background-position: 50% 50%;">
        <iframe id="commentModuleContainer_iframe" class="comment-popup-frame" data-item-id="@ViewBag.ItemId" style="height: 100%; width: 100%;"></iframe>
    </div>
    <iframe id="delete_popup_iframe" class="comment-popup-frame displayNone" allowtransparency="true" style="position: absolute;"></iframe>

    <div id="widgetCommentModuleContainer" class="displayNone" style="background-image: url('@(globalAppSettings.SystemSettings.CDNLink + "/images/waitingpopup.gif")'); background-color: #fff; background-repeat: no-repeat; background-position: 50% 50%; z-index: 1000001;">
        <iframe id="widgetCommentModuleContainer_iframe" class="comment-popup-frame" style="height: 100%; width: 100%;"></iframe>
    </div>

    <div id="viewShare_popup" class="col-md-12 DisplayNone">
        <div id="sharepopup_wrapper_WaitingPopup" class="e-waitpopup-sharepopup">
            <div class="loader-blue loader-icon" id="loader-icon">
                <svg class="circular">
                    <circle class="path" cx="27" cy="27" r="20" fill="none" stroke-width="4" stroke-miterlimit="10"></circle>
                </svg>
            </div>
        </div>
        <iframe id="viewShare_popup_iframe" class="EditIframe"></iframe>
    </div>
    <div class="ViewShare_popup_shadow"></div>
    @* ******************* Please add new iframes below this line *************** *@
    <div id="commentImage_popup" class="col-md-12 no-padding hidden">
        <div class="col-lg-12 no-padding" id="PopupContainer">
            <div class="col-md-12">
                <div class="col-xs-12 no-padding" style="float:right">
                    <a href="javascript:void(0);" onclick="CommentImageDialogClose()" class="PopupClose closePopupImage"><span class="su su-close"></span></a>
                </div>
            </div>
            <div class="dialogBody col-xs-12 no-padding">
                <img id="commentImage_popup_image" src="" style="width: 100%;">
            </div>
        </div>
    </div>
    <div id="pin-widget-popup" class="displayNone" data-item-id="@(parentId != null ? parentId : itemId)" data-widget-id="" data-widget-name="">
        <iframe id="pin-widget-popup-iframe" class="" style="height: 100%; width: 100%;"></iframe>
    </div>
    <div id="save-view-popup" class="displayNone" data-item-id="@(parentId != null ? parentId : itemId)" data-widget-id="" data-widget-name="">
        <iframe id="save-view-popup-iframe" class="" style="height: 100%; width: 100%;"></iframe>
    </div>
    <div id="success-alert">
        <div id="image-container">
            <div class="image-holder">
                <span class="su su-tick" alt="Success Icon"></span>
            </div>
        </div>
        <div id="message">
            <h1 id="message-header"></h1>
            <span id="message-content"></span>
        </div>
    </div>
    <div id="warning-alert">
        <div id="image-container">
            <span class="su su-warning-alt" alt="Warning Icon"></span>
        </div>
        <div id="message" class="div-close">
            <h1 id="message-header"></h1>
            <span id="message-content"></span>
        </div>
        <div class="close-div">
            <span id="close-content">Close</span>
        </div>
    </div>
</body>
@if (Context.User.Identity.IsAuthenticated)
{
    isAuthenticated = "true";
}
else
{
    isAuthenticated = "false";
}
@if (!Context.User.Identity.IsAuthenticated)
{
    <script>
            $(document).ready(function () {
                if (externalLogin != null && externalLogin.toLowerCase() == "windowsad" &&
				sso != null && sso.toLowerCase() == "true") {
                    $.ajax({
                        type: "GET",
                        url: "@baseUrl"+"/windowsauthentication/account/login",
                        data: { },
                        cache: false,
                        contentType: "application/json; charset=utf-8",
                        statusCode: {
                            200: function(result) {
                                if (result.responseText.toLowerCase() == "true") {
                                    window.location.href = window.location.href;
                                } else {
                                    $(".error-message").css("display", "block");
                                }
                            },
                        },

                        dataType: "json",
                        success: function(result) {  },
                        error :  function(result) {
						if(result.responseText.toLowerCase() == "true"){
						renderDashboard(comment,view);
						}
						else{
						if(@isPublic == true){
						enableComment = "false";
		                enableView = "false";
		                renderDashboard(comment,view);
						}
						else{
						window.location.href = "@baseUrl"+"/login";
						}
						}
						}
                  });
                }
            });
    </script>
}
else
{
    <script>
        $(document).ready(function () {
            if (externalLogin != "") {
                renderDashboard(comment, view);
            }
        });
    </script>
}

<script type="text/javascript">
    var userId = "@userId";
    var userName = "@userName";
    var viewId = "@ViewBag.ViewId";
    var item_Id = "@ViewBag.ItemId";
    var isMultiDashboard = "@ViewBag.IsMultiDashboard";
    var childDesignerId = "@ViewBag.ChildDesignerId";
    var enableComment = "@enableComment";
    var pageurl = "@requestUrl.LocalPath";
    var baseUrl = "@globalAppSettings.SystemSettings.BaseUrl";
    var dashboardServiceUrl = "@globalAppSettings.SystemSettings.InternalAppDataServiceUrl";
    var enableView = "@enableView";
    var token = "@accessToken";
    var isAuthenticated = "@isAuthenticated";
    var parentRefUrl = (window.location != window.parent.location) ? document.referrer : document.location.href.replace(document.location.pathname + document.location.search, "");
    if(parentRefUrl == ""){
        var parentUrl = "";
    }
    else {
        var parentUrl = parentRefUrl.match(/:\/\/(.[^/]+)/)[1];
    }
    var iframeRefUrl=window.location.href;
    var iframeUrl=iframeRefUrl.match(/:\/\/(.[^/]+)/)[1];


    function IframeLoad() {
        if(iframeUrl == parentUrl)
        {
            if(window.parent.$("#item-viewer").data("ejWaitingPopup") != undefined) {
                window.parent.$("#item-viewer").ejWaitingPopup("hide");
            }
        }
    }
    $(document).ready(function () {

        IframeLoad();

        $(window).resize(function() {
            ResizePopup();
            if($("#is_mobile").val() == "true"){
                $("#dashboard").css("height", $(window).height() - 50 + "px");
            }
            if($(".su-sidebar-collapse").length <= 0){
                setWidth();
            } else {
                if ($("#comments, #filters, #views").hasClass('active')) {
                    $("#dashboard").css("width", $(window).width() - 450 + "px");
                }
            }
        });

        $(window).bind('popstate',
            function(e) {
                applyFilter();
            });

        window.addEventListener('message', receiveMessage, false);
        function receiveMessage(event) {
            var comment = "";
            var view = "";
            if (event.data) {
                if (iframeUrl == parentUrl) {
                    applyFilter();
                }
                else {
                    var messageData = JSON.parse(event.data);
                    if(messageData["access_token"] != ""){
                        token = messageData["access_token"];
                        var te = "@Html.Raw(itemLocation)";
                        $.ajax({
                            type: "POST",
                            url: embeddedLoginUrl,
                            data: {
                                token:token,
                                itemPath:te
                            },
                            success: function(obj) {
                                if(obj.data != null && obj.data.Status == true){
                                    userId = obj.data.UserId;
                                    userName = obj.data.UserName;
                                    isAuthenticated = true;
                                    var iframeUrl = iframeRefUrl.substring(iframeRefUrl.indexOf('?')+1,iframeRefUrl.length);
                                    comment = iframeUrl.substring(iframeUrl.indexOf('=')+1,iframeUrl.indexOf('&'));
                                    view = iframeUrl.substring(iframeUrl.indexOf('=',iframeUrl.indexOf('=')+1)+1,iframeUrl.indexOf('&',iframeUrl.indexOf('&') + 1));
                                    enableComment = (comment == "true")? "true":"false";
                                    enableView = (view == "true")? "true":"false";
                                    if($("#dashboard").data("ejDashboardViewer") != null){
                                        if(enableComment.toLowerCase() == "false"){
                                            $("ul.options #comments").css("display","none");
                                        }
                                        else{
                                            $("ul.options #comments").css("display","block");
                                        }
                                        if(enableView.toLowerCase() == "false"){
                                            $("ul.options #views").css("display","none");
                                        }
                                        else{
                                            $("ul.options #views").css("display","block");
                                        }
                                        $("#dashboard").data("ejDashboardViewer").model.filterOverviewSettings.showSaveIcon = (view == "true")? true:false;
                                        $("#dashboard").data("ejDashboardViewer").model.filterOverviewSettings.showSaveAsIcon = (view == "true")? true:false;
                                        $("#dashboard").data("ejDashboardViewer").model.filterOverviewSettings.showViewSavedFilterIcon = (view == "true")? true:false;
                                        if($("#dashboard").data("ejDashboardViewer").model.allowComment == false && enableComment == "true"){
                                            $("#dashboard").data("ejDashboardViewer")._setModel({"allowComment":(comment == "true")? true:false});
                                        }
                                    }
                                    else{
                                        renderDashboard(comment,view);
                                        $("#dashboard").data("ejDashboardViewer").model.accessToken = token;
                                    }
                                }
                                else{
                                    if(@isPublic == true && isAuthenticated.toLowerCase() == "false")
                                    {
                                        enableComment = "false";
                                        enableView = "false";
                                        renderDashboard(comment,view);
                                    }
                                    else
                                    {
                                        window.location.href = "@baseUrl"+"/login";
                                    }
                                }
                            }
                        });
                    }
                    else{
                        token = token;
                    }

                }
            }
            else{
                window.location.href = "@baseUrl"+"/login";
            }
        }

        if (externalLogin != null && externalLogin.toLowerCase() == "azuread" && sso != null && sso.toLowerCase() == "true")
        {
            if (isAuthenticated.toLowerCase() == "true"){
                renderDashboard(comment,view);
            }
            else{
                if(@isPublic == true)
                {
                    enableComment = "false";
                    enableView = "false";
                    renderDashboard(comment,view);
                }
                else
                {
                    window.location.href = "@baseUrl"+"/login";
                }
            }
        }
        if(sso.toLowerCase() == "false"){
            if (isAuthenticated.toLowerCase() == "true"){
                userId = "@userId";
                userName = "@userName";
                renderDashboard(comment,view);
            }
            else{
                if(@isPublic == true && isAuthenticated.toLowerCase() == "false"){
                    enableComment = "false";
                    enableView = "false";
                    renderDashboard(comment,view);
                }
            }
        }
    });
    function renderDashboard(comment,view){
        var dashboardViewWaitingPopupTemplateId = createLoader("dashboard-view-toogle");
		var waitingpopup = $("#dashboard-view-toogle").ejWaitingPopup({ template:$("#" + dashboardViewWaitingPopupTemplateId) });
        dashboardviewerObj = $('#dashboard').data("ejDashboardViewer");
        window.onresize = SavedViewHeight;
        var windowwidth = $(window).width();
        var te = "@Html.Raw(itemLocation)";
        var ReportName = "@ViewBag.ItemName";
        var ReportDescription = "@ViewBag.ItemDescription";
        var authentication = "@isAuthenticated";
        if(enableComment.toLowerCase() == "false"){
            $("ul.options #comments").css("display","none");
        }
        else{
            $("ul.options #comments").css("display","block");
        }
        if(enableView.toLowerCase() == "false"){
            $("ul.options #views").css("display","none");
        }
        else{
            $("ul.options #views").css("display","block");
        }
        var browser = ej.browserInfo();
        var showSave = "";
        var showSaveAs = "";
        var viewSavedIcon = "";
        var commentShow = "";
        $("#pin-widget-popup").ejDialog({
            width: "400px",
            height: "310px",
            showOnInit: false,
            allowDraggable: true,
            enableResize: false,
            title: "[[[Pin Item to the Homepage]]]",
            enableModal: true,
            showHeader: false
        });
        var pinWidgetWaitingPopupTemplateId = createLoader("pin-widget-popup_wrapper");
		$("#pin-widget-popup_wrapper").ejWaitingPopup({ template:$("#" + pinWidgetWaitingPopupTemplateId) });
        if(authentication.toLowerCase()== "true" && comment == ""){
            commentShow = @enableComment;
        }
        else if(comment != ""){
            commentShow = (comment == "true")? true :false;
        }
        else{
            commentShow = false;
        }
        if (browser != null && browser.name === "msie" && parseFloat(browser.version) <= 8.0) {
            var divString = '<div style="top:20%;width:575px;margin:0px auto;position:relative;text-align:center">' +
                '<div style="padding:35px 68px 35px 68px;" class="e-dbrd-control-container">' +
                '<p style="font-size:18px;font-weight:bold">[[[Internet Explorer 8 and Internet Explorer 11 in Enterprise Mode are not supported]]]</p>' +
                '<p style="font-size:10px">[[[Please upgrade to a newer browser if you are using IE8 or turn off Enterprise Mode if you are using IE11 in Enterprise Mode.]]]</p>' +
                '<p style="text-align:left;margin-top:20px">[[[Supported Browsers:]]]</p><div class="alert-ie">' +
                '<div><span><img  src="@Url.Content("~/dashboardservice/themes/common-images/IE.png")" /></span><p>[[[Internet Explorer]]] 9+</p> </div> ' +
                '<div><span><img  src="@Url.Content("~/dashboardservice/themes/common-images/Edge.png")" /> </span><p>[[[Microsoft Edge]]]</p></div>' +
                '<div><span><img  src="@Url.Content("~/dashboardservice/themes/common-images/Firefox.png")" /></span><p>[[[Mozilla Firefox]]] 22+</p></div>' +
                '<div><span><img  src="@Url.Content("~/dashboardservice/themes/common-images/Chrome.png")" /></span><p>[[[Chrome]]] 17+</p></div>' +
                '<div><span><img  src="@Url.Content("~/dashboardservice/themes/common-images/Opera.png")" /></span><p>[[[Opera]]] 12+</p></div>' +
                '<div><span><img  src="@Url.Content("~/dashboardservice/themes/common-images/Safari.png")" /></span><p>[[[Safari]]] 5+</p></div></div></div>'
            var body = document.getElementById("dashboard");
            body.style.backgroundColor = "white";
            body.innerHTML = divString;
        } else {
            if (viewId != null && viewId != "")
            {
                var viewName = "";
                var canUpdate = false;
                var link = "";
                $.ajax({
                    type: "POST",
                    url: getViewParameterUrl,
                    data: { ViewId: viewId, UserId: userId, UserName: userName, itemid: item_Id, IsMultiDashboard: isMultiDashboard, parentDashboardId: "@parentId" },
                    success: function (data) {
                        var viewDetails;
                        if (data.viewDetails != null && data.viewDetails != '') {
                            if (data.isPublic) {
                                viewDetails = data.viewDetails;
                                viewName = viewDetails.ViewName;
                                parameter = viewDetails.QueryString;
                                canUpdate = viewDetails.CanEdit;
                            } else {
                                viewDetails = JSON.parse(data.viewDetails);
                                viewName = viewDetails.ViewName;
                                parameter = viewDetails.QueryString;
                                canUpdate = viewDetails.CanEdit;
                            }
                        }
                        else {
                            window.location.href = window.location.href.replace(window.location.search, "");
                        }
                        if(@enableView == true && authentication.toLowerCase() == "true" && view == ""){
                            showSave =  $("#is_mobile").val() == "false" ? viewDetails.CanEdit : false;
                            showSaveAs = @enableView;
                            viewSavedIcon = @enableView;
                        }
                        else if(view != ""){
                            showSave =  $("#is_mobile").val() == "false" ? viewDetails.CanEdit : false;
                            showSaveAs = (view == "true") ? true :false;
                            viewSavedIcon = (view == "true") ? true :false;
                        }
                        else{
                            showSave = false;
                            showSaveAs = false;
                            viewSavedIcon = false;
                        }
                        $("#dashboard").ejDashboardViewer({
                            accessToken : token,
                            serviceUrl: "@dashboardServiceUrl",
                            cdnFilePath: "@globalAppSettings.SystemSettings.UseCDN.ToString().ToLower()" == "true" ? "@globalAppSettings.SystemSettings.CDNLink" + "/scripts/viewer" : "",
                            dashboardPath: te,
                            reportName: ReportName,
                            reportDescription: ReportDescription,
                            enableExport: true,
                            enablePrint: false,
                            enableFilterOverview:true,
                            localeSettings: {
                                resourcePath: "",
                                culture: "@ViewBag.Culture"
                            },
                            interactionSettings: {
                                allowHistoryMaintenance: true,
                                handleHistoryEvent: false
                            },
                            _selectedTabGuid : childDesignerId,
                            tabActive: function(args) {
                                $("#dashboard").data("ejDashboardViewer").model.dashboardCreated = "";
                                item_Id = $("#dashboard").data("ejDashboardViewer")._getCurrentDashboardGuid();
                                $("#dashboard_Comment").attr("data-item-id", item_Id);
                                $("#favorite_Item").attr("data-item-id", item_Id);
                                $("#favorite_Item").attr("data-favorite-value", "false");
                                if ($("#comments").hasClass('active')) {
                                    var itemId = $("#dashboard_Comment").attr("data-item-id");
                                    window.frames[0].GetAllComments(itemId, "dashboard", itemId, "desc", isMultiDashboard);
                                }
                                resetViewPanel();
                                filterView();
                                $.ajax({
                                    type: "POST",
                                    url: "@Url.Action("GetCommentedWidgets", "DashboardViews")",
                                    data: {
                                        designerId: item_Id,
                                        parentId : $("#favorite_Item").attr("data-parent-id")
                                    },
                                    success: function(data) {
                                        var commentObj = { isDashboardCommented: data.IsDashboardCommented.toLowerCase() == "true", isWidgetCommented: true, widgets: data.Result };
                                        if(data.IsDashboardCommented.toLowerCase() == "true")
                                        {
                                            parent.$("ul.options li#comments span.su-without-comment").addClass("su-with-comment").removeClass("su-without-comment");
                                        }
                                        else{
                                            parent.$("ul.options li#comments span.su-with-comment").addClass("su-without-comment").removeClass("su-with-comment");
                                        }
                                        $("#dashboard").ejDashboardViewer("instance").applyComments(commentObj);
                                        $("#dashboard").ejDashboardViewer("instance").option("favoriteSettings.isFavorite", data.IsDashboardFavorite.toLowerCase() == "true");
                                        $("#favorite_Item").attr("data-favorite-value", data.IsDashboardFavorite.toLowerCase());
                                        $('#dashboard').data("ejDashboardViewer").model.filterOverviewSettings.viewName = null;
                                        $('#dashboard').data("ejDashboardViewer").model.filterOverviewSettings.viewId = null;
                                    }
                                });
                                if (iframeUrl == parentUrl) {
                                    var currentUrl = parent.$("#current-url").attr("data-url");
                                    var tabName = $("#dashboard").data("ejDashboardViewer").getCurrentTab().tabName;
                                    var stateObj = window.top.history.state;
                                    if(window.innerWidth >= 1041 && history.pushState != undefined) {
                                        if (currentUrl != undefined) {
                                            var index = currentUrl.indexOf("&tab=");
                                            if (index > 0) {
                                                var tempUrl = currentUrl.substring(0, index);
                                                window.top.history.replaceState(stateObj, "DashboardViewer", tempUrl + "&tab=" + tabName);
                                            } else {
                                                window.top.history.replaceState(stateObj, "DashboardViewer", currentUrl + "&tab=" + tabName);
                                            }
                                        } else {
                                            window.top.history.replaceState(stateObj, "DashboardViewer", window.location.pathname + "?tab=" + tabName);
                                        }
                                    }
                                }
                            },
                            onFilterOverviewUpdated:"onFilterOverviewUpdated",
                            filterParameters: parameter,
                            onDashboardCommented: "openDashboardComment",
                            onWidgetCommented: "openWidgetComment",
                            onCommentDialogClosing: "closeComment",
                            _itemViewId:"@ViewBag.ViewId",
                            _isPublic : @isPublic,
                            _itemId: "@_itemId",
                            _openShareDialog:"ShareView",
                            allowComment: commentShow,
                            commentSettings: {
                                isDashboardCommented: @Html.Raw(ViewBag.IsDashboardCommented),
                                widgets: [@Html.Raw(ViewBag.CommentedWidgets)]
                            },
                            favoriteSettings:{
                                enabled: commentShow,
                                isFavorite:"@(ViewBag.IsFavorite.ToString().ToLower())"=="true",
                            },
                            beforeDashboardIconRendered: "beforeDashboardIconRendered",
                            onMenuIconClick: function(information){
                                if(typeof(information.name)!= "undefined" && information.name == "Pin Widget"){
                                    $("#pin-widget-popup").ejDialog("open");
                                    $("#pin-widget-popup_wrapper").ejWaitingPopup("show");
                                    $("#pin-widget-popup-iframe").attr("src", pinWidgetToHomepageUrl);
                                    $("#pin-widget-popup").attr("data-widget-id",information.widgetId).attr("data-widget-name",information.headertext);
                                    $("#pin-widget-popup").attr("data-tab-id",information.tabId != null ? information.tabId : null);
                                }
                            },
                            onFavoriteStateChange: "updatefavorite",
                            dashboardCreated : "openComments",
                            resizeDashboard :"closeCommentOnResize",
                            filterPanelSettings: {
                                showIcon: false,
                                filterPanelId: "filter-view",
                                showHeader: false
                            },
                            filterOverviewSettings: {
                                showSaveIcon: showSave,
                                showSaveAsIcon: showSaveAs,
                                showViewSavedFilterIcon:viewSavedIcon,
                                viewName: viewDetails.ViewName,
                                viewId : "@ViewBag.ViewId"
                            },
                            onSaveFilter: "SaveFilter",
                            onSaveAsFilter: "SaveFilter",
                            onViewSavedFilters: "openViewSection",
                            showGetLinkIcon:false
                        });

                        $("#current-view").show();
                        $("#current-view").html("");
                        if (canUpdate) {
                            $("#saved-filter-update").show();
                            $("#update-view").addClass("pointer-events");
                            $("#update-view").css("opacity",0.5);
                        } else {
                            $("#saved-filter-Saveas").show();
                        }
                        $("#save-section").hide();
                        $("#save-lable-section label").html("");

                        link = '<a class="saved-view-link txt-overflow" href="' +
                            pageurl +
                            '?viewid=' +
                            viewId +
                            '" target="_blank" data-toggle="tooltip" data-original-title="' + viewName + '">' +
                            viewName +
                            '</a>';
                        $("#save-lable-section label").append(link);
                        $("#save-lable-section").show();
                        $("#new-save").hide();
                        $("#unsaved-filter,#unsaved-filter-title").show();
                        $('.saved-view[viewid="' + viewId + '"').css("background-color", "#f9f9f9");
                    },
                    error: function () {
                        window.location.href = window.location.href.replace(window.location.search, "");
                    }
                });
            }else {
                if(@enableView == true && authentication.toLowerCase() == "true" && view == ""){
                    showSave =  @enableView;
                    showSaveAs = @enableView;
                    viewSavedIcon = @enableView;
                }
                else if(view != ""){
                    showSave =  (view == "true") ? true :false;
                    showSaveAs = (view == "true") ? true :false;
                    viewSavedIcon = (view == "true") ? true :false;
                }
                else{
                    showSave = false;
                    showSaveAs = false;
                    viewSavedIcon = false;
                }
                $("#dashboard").ejDashboardViewer({
                    accessToken : token,
                    serviceUrl: "@dashboardServiceUrl",
                    cdnFilePath: "@globalAppSettings.SystemSettings.UseCDN.ToString().ToLower()" == "true" ? "@globalAppSettings.SystemSettings.CDNLink" + "/scripts/viewer" : "",
                    dashboardPath: te,
                    reportName: ReportName,
                    reportDescription: ReportDescription,
                    enableExport: true,
                    enablePrint: false,
                    enableFilterOverview:true,
                    _selectedTabGuid : childDesignerId,
                    tabActive: function(args) {
                        $("#dashboard").data("ejDashboardViewer").model.dashboardCreated = "";
                        item_Id = $("#dashboard").data("ejDashboardViewer")._getCurrentDashboardGuid();
                        $("#dashboard_Comment").attr("data-item-id", item_Id);
                        $("#favorite_Item").attr("data-item-id", item_Id);
                        $("#favorite_Item").attr("data-favorite-value", "false");
                        if ($("#comments").hasClass('active')) {
                            var itemId = $("#dashboard_Comment").attr("data-item-id");
                            window.frames[0].GetAllComments(itemId, "dashboard", itemId, "desc", isMultiDashboard);
                        }
                        resetViewPanel();
                        filterView();
                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("GetCommentedWidgets", "DashboardViews")",
                            data: {
                                designerId: item_Id,
                                parentId : $("#favorite_Item").attr("data-parent-id")
                            },
                            success: function(data) {
                                var commentObj = { isDashboardCommented: data.IsDashboardCommented.toLowerCase() == "true", isWidgetCommented: true, widgets: data.Result };
                                if(data.IsDashboardCommented.toLowerCase() == "true")
                                {
                                    parent.$("ul.options li#comments span.su-without-comment").addClass("su-with-comment").removeClass("su-without-comment");
                                }
                                else{
                                    parent.$("ul.options li#comments span.su-with-comment").addClass("su-without-comment").removeClass("su-with-comment");
                                }
                                $("#dashboard").ejDashboardViewer("instance").applyComments(commentObj);
                                $("#dashboard").ejDashboardViewer("instance").option("favoriteSettings.isFavorite", data.IsDashboardFavorite.toLowerCase() == "true");
                                $("#favorite_Item").attr("data-favorite-value", data.IsDashboardFavorite.toLowerCase());
                                $('#dashboard').data("ejDashboardViewer").model.filterOverviewSettings.viewName = null;
                                $('#dashboard').data("ejDashboardViewer").model.filterOverviewSettings.viewId = null;
                            }
                        });

                        if (iframeUrl == parentUrl) {
                            var currentUrl = parent.$("#current-url").attr("data-url");
                            var tabName = $("#dashboard").data("ejDashboardViewer").getCurrentTab().tabName;
                            var stateObj = window.top.history.state;
                            if(window.innerWidth >= 1041 && history.pushState != undefined) {
                                if (currentUrl != undefined) {
                                    var index = currentUrl.indexOf("&tab=");
                                    if (index > 0) {
                                        var tempUrl = currentUrl.substring(0, index);
                                        window.top.history.replaceState(stateObj, "DashboardViewer", tempUrl + "&tab=" + tabName);
                                    } else {
                                        window.top.history.replaceState(stateObj, "DashboardViewer", currentUrl + "&tab=" + tabName);
                                    }
                                } else {
                                    window.top.history.replaceState(stateObj, "DashboardViewer", window.location.pathname + "?tab=" + tabName);
                                }
                            }
                        }
                    },
                    localeSettings: {
                        resourcePath: "",
                        culture: "@ViewBag.Culture"
                    },
                    interactionSettings: {
                        allowHistoryMaintenance: true,
                        handleHistoryEvent: false
                    },
                    onFilterOverviewUpdated:"onFilterOverviewUpdated",
                    filterParameters: "@Html.Raw(ViewBag.FilterQuery)",
                    onDashboardCommented: "openDashboardComment",
                    onWidgetCommented: "openWidgetComment",
                    onCommentDialogClosing: "closeComment",
                    _itemViewId: "@ViewBag.ViewId",
                    _isPublic : @isPublic,
                    _itemId: "@_itemId",
                    _openShareDialog:"ShareView",
                    allowComment: commentShow,
                    commentSettings: {
                        isDashboardCommented: @Html.Raw(ViewBag.IsDashboardCommented),
                        widgets: [@Html.Raw(ViewBag.CommentedWidgets)]
                    },
                    favoriteSettings:{
                        enabled: commentShow,
                        isFavorite:"@(ViewBag.IsFavorite.ToString().ToLower())"=="true",
                    },
                    beforeDashboardIconRendered: "beforeDashboardIconRendered",
                    onMenuIconClick: function(information){
                        if(typeof(information.name)!= "undefined" && information.name == "Pin Widget"){
                            $("#pin-widget-popup").ejDialog("open");
                            $("#pin-widget-popup_wrapper").ejWaitingPopup("show");
                            $("#pin-widget-popup-iframe").attr("src", pinWidgetToHomepageUrl);
                            $("#pin-widget-popup").attr("data-widget-id",information.widgetId).attr("data-widget-name",information.headertext);
                            $("#pin-widget-popup").attr("data-tab-id",information.tabId != null ? information.tabId : null);
                        }
                    },
                    onFavoriteStateChange: "updatefavorite",
                    dashboardCreated : "openComments",
                    resizeDashboard :"closeCommentOnResize",
                    filterPanelSettings: {
                        showIcon: false,
                        filterPanelId: "filter-view",
                        showHeader: false
                    },
                    filterOverviewSettings: {
                        showSaveIcon: showSave,
                        showSaveAsIcon: showSaveAs,
                        showViewSavedFilterIcon:viewSavedIcon,
                        viewName: null,
                        viewId : null
                    },
                    onSaveFilter: "SaveFilter",
                    onSaveAsFilter: "SaveFilter",
                    onViewSavedFilters: "openViewSection",
                    showGetLinkIcon:false
                });
            }
        }
        setWidth();
        if(iframeUrl !== parentUrl) {
            var obj = $("#dashboard").ejDashboardViewer("instance");
            obj.model.interactionSettings.allowHistoryMaintenance = false;
            obj.model.interactionSettings.handleHistoryEvent = false;
        }
    }

    $(document).on("click", ".close-div", function () {
        parent.$('#warning-alert').fadeOut();
    });

    function setWidth() {
        $("#dashboard").css("width", $(window).width() - 40 + "px");
        if ($("#comments, #filters, #views").hasClass('active')) {
            $("#dashboard").css("width", $(window).width() - 450 + "px");
        }
    }

    function applyFilter() {
        var url = window.parent.location.search;
        var tabName = getUrlQueryVariable(url,"tab");
        if (tabName != undefined && tabName != "") {
            $("#dashboard").data("ejDashboardViewer").selectTabByName(decodeURI(tabName));
        } else if (isMultiDashboard.toLowerCase() === "true"){
            $("#dashboard").data("ejDashboardViewer").selectTabByIndex(0);
        }

        var stateObj = window.top.history.state;
        if (stateObj != undefined) {
            var currentViewId = JSON.parse(stateObj)['sync-dbrd-key'];
            if (currentViewId != undefined && currentViewId != "") {
                $("#dashboard").data("ejDashboardViewer").loadHistoryData(currentViewId);
            }
        }
    }

    function beforeDashboardIconRendered(args){
        if(!ej.isNullOrUndefined(args) && !ej.isNullOrUndefined(args.iconsinformation)) {
            var index = null;
            for(var i=0; i < args.iconsinformation.length; i++) {
                if(args.iconsinformation[i].name === "comment") {
                    index = i;
                    break;
                }
            }
            if(!ej.isNullOrUndefined(index)) {
                args.iconsinformation.splice(index, 1);
            }
        }
    }

    function getUrlQueryVariable(url, variable) {
        var query = url.substring(url.indexOf('?') + 1);
        var vars = query.split("&");
        for (var i = 0; i < vars.length; i++) {
            var pair = vars[i].split("=");
            if (pair[0] == variable) { return pair[1]; }
        }
        return null;
    }
</script>
