@using Microsoft.AspNetCore.Mvc.ViewFeatures;
@using Microsoft.Extensions.DependencyInjection;
@inject ServerPrincipal _identityResponse
@{
    var globalAppSettings = _globalAppSettings;
    var isMobile = new DeviceDetection(Context).IsMobile;
    Layout = null;
    ViewBag.Title = ViewBag.ItemName + " - " + globalAppSettings.SystemSettings.OrganizationName;
    var isAdmin = Context.Session.GetString("IsAdmin") != null && Convert.ToBoolean(Context.Session.GetString("IsAdmin"));
    var baseUrl = ViewBag.BaseUrl;
    var cdnLink = globalAppSettings.SystemSettings.CDNLink;
    var dashboardServiceUrl = globalAppSettings.SystemSettings.InternalAppDataServiceUrl;
    var dashboardServiceResourceUrl = globalAppSettings.SystemSettings.DashboardServiceResourceUrl;
    var isDebug = globalAppSettings.SystemSettings.IsDebug;
    var enableComment = "false";
    ItemDetail itemDetail = new ItemDetail();
    itemDetail = ViewBag.itemDetail;
    var itemId = ViewBag.ItemId;
    var parentId = ViewBag.ParentId;
    var isUserAuthenticated = "false";
    var isPublic = globalAppSettings.SystemSettings.IsMarkItemsPublic && itemDetail.IsPublic ? "true" : "false";
    var _itemId = ViewBag.IsMultiDashboard ? parentId : itemId;
    ViewBag.DateFormat = globalAppSettings.SystemSettings.DateFormat;
    ViewBag.TimeFormat = globalAppSettings.SystemSettings.TimeFormat ? "HH:mm" : "hh:mm tt";
    var accessToken = ViewBag.AccessToken;
    var iframeLoaded = "false";
    var faviconLogo = globalAppSettings.SystemSettings.FavIcon;
    var loginImage = globalAppSettings.SystemSettings.LoginLogo;
    var canEdit = itemDetail.CanWrite;
    var isCurrentVersion = ViewBag.IsCurrentVersion;
    var versionLink = "v=" + ViewBag.VersionNumber;
    var currentUrl = ViewBag.currentUrl;
    var symbol = (currentUrl.IndexOf("?") > -1) ? "&" : "?";
    var dataServiceUrl = ServerAppConfig.InternalAppDataServiceUrl.TrimEnd('/');
    var provider = itemDetail.IsSampleData ? (ViewBag.DataSourceProviders == null ? string.Empty : ViewBag.DataSourceProviders[0].Provider) : string.Empty;
    var service = itemDetail.IsSampleData ? (ViewBag.DataSourceProviders == null ? string.Empty : (ViewBag.DataSourceProviders[0] == null ? string.Empty : ViewBag.DataSourceProviders[0].Service[0])) : string.Empty;
    var permissions = ViewBag.ItemAddOptions as Dictionary<ItemType, bool>;
    var isUserAuthenticatedInCurrentTenant = ViewBag.IsUserAuthenticatedInCurrentTenant;
    var isEmbed = ViewBag.IsEmbed == null ? false : ViewBag.IsEmbed;
    bool isSelfHosted = ServerAppConfig.IsSelfHosted;
    var dashboardBIUrl = new DashboardServerEndPoints(globalAppSettings).DashboardServerBIUrl();
    var dashboardServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
    var dashboardDesignerResourceUrl = globalAppSettings.SystemSettings.DesignerCdnLink.TrimEnd('/');
    var requestUrl = new Uri(Context.Request.GetDisplayUrl());
    var userId = 0;
    var userName = "";
    if (_identityResponse!=null && _identityResponse.User != null && _identityResponse.IsAuthenticated && isUserAuthenticatedInCurrentTenant)
    {
        enableComment = ViewBag.IsSlideshow ? "false" : "true";
        isUserAuthenticated = "true";
        userId = _identityResponse.User.UserId;
        userName = _identityResponse.User.Email;
    }
    else
    {
        enableComment = "false";
        isUserAuthenticated = "false";
    }

    if (isEmbed)
    {
        canEdit = false;
    }
}

@{
    var preloadScriptFiles = new string[]
    {
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(this.Context.Request.PathBase, dashboardServerResourceUrl + "/cdn/scripts/designer/dashboard-designer.min.js"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(this.Context.Request.PathBase, dashboardServerResourceUrl + "/cdn/scripts/designer/dashboard-designer-component.min.js"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(this.Context.Request.PathBase, dashboardServerResourceUrl + "/cdn/scripts/signalr-bundle.min.js")
    };
    var preloadStyleFiles = new string[]
    {
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(this.Context.Request.PathBase, dashboardServerResourceUrl + "/cdn/css/designer/dashboard-designer-component.min.css"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(this.Context.Request.PathBase, dashboardServerResourceUrl + "/cdn/css/viewer/themes/default-theme/ej.dashboardviewer.all.min.css"),
        this.Context.RequestServices.GetRequiredService<IFileVersionProvider>().AddFileVersionToPath(this.Context.Request.PathBase, dashboardServerResourceUrl + "/cdn/css/designer/dashboard-designer.min.css")
    };
}

<!DOCTYPE html>
<html style="height:100%;width:100% ; overflow:hidden;" lang="@globalAppSettings.SystemSettings.Language">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    @if (!isSelfHosted && !globalAppSettings.SystemSettings.IsDebug)
    {
        <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
    }
    @await Html.PartialAsync("_OGPContent", new ViewDataDictionary(ViewData) { { "PageTitle", ViewBag.Title }, { "OrganizationName", globalAppSettings.SystemSettings.OrganizationName }, { "Logo", loginImage }, { "Description", itemDetail.Description } })

    <link rel="icon" href="@faviconLogo" onerror="if (this.href != '@cdnLink/images/application/@ServerAppConfig.AppSettings.AppBranding.Identifier/@IconFileNames.Favicon') this.href = '@cdnLink/images/application/@ServerAppConfig.AppSettings.AppBranding.Identifier/@IconFileNames.Favicon';" />

    <title>@ViewBag.Title</title>
    @if (System.Diagnostics.Debugger.IsAttached)
    {
        <link rel="stylesheet" type="text/css" href="@(dashboardServiceResourceUrl + "/cdn/css/viewer/themes/default-theme/ej.dashboardviewer.all.min.css")" />
    }
    <environment include="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/viewer/themes/default-theme/ej.dashboardviewer.all.css" />
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/viewer/themes/default-theme/ej.dashboardviewer.all.min.css" />
    </environment>

    @if (isMobile)
    {
        <environment include="Development,CloudDevelopment">
            <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/file-render-dashboard-mobile.css" />
        </environment>
        <environment exclude="Development,CloudDevelopment">
            <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/file-render-dashboard-mobile.min.css" />
        </environment>

    }
    else
    {
        <environment include="Development,CloudDevelopment">
            <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/file-render-dashboard.css" />
        </environment>
        <environment exclude="Development,CloudDevelopment">
            <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/file-render-dashboard.min.css" />
        </environment>

    }
    <environment include="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/share-permission.css" />
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/viewer/dashboard-viewer-v1-dependency.js"></script>
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/share-permission.js"></script>
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/viewer/dashboard-viewer-v1-common-all.js"></script>
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/viewer/dashboard-viewer-v1-all.js"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/share-permission.min.css" />
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/viewer/dashboard-viewer-v1-dependency.min.js"></script>
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/share-permission.min.js"></script>
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/viewer/dashboard-viewer-v1-common-all.min.js"></script>
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/viewer/dashboard-viewer-v1-all.min.js"></script>
    </environment>

    @if (isMobile)
    {
        <environment include="Development,CloudDevelopment">
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/viewer/dashboard-viewer-v1-mobile-utilities.js"></script>
        </environment>
        <environment exclude="Development,CloudDevelopment">
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/viewer/dashboard-viewer-v1-mobile-utilities.min.js"></script>
        </environment>

    }
    else
    {
        <environment include="Development,CloudDevelopment">
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/viewer/dashboard-viewer-v1-utilities.js"></script>
        </environment>
        <environment exclude="Development,CloudDevelopment">
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/viewer/dashboard-viewer-v1-utilities.min.js"></script>
        </environment>

    }
    <script>
        window.destroyAll = function () { try { ej.widget.destroyAll($('.e-js').off()); } catch (e) { } $(document.body).html('-'); CollectGarbage(); };
    </script>

    <style>
        html {
            height: 100%;
        }

        #dashboard {
            margin-right: 40px;
        }

        #dashboard_WaitingPopup {
            height: 100% !important;
            width: 100% !important;
            background-color: #fff !important;
        }

        .icon {
            text-align: center;
        }

        .e-dbrd-banner-text-icon {
            font-family: 'Roboto' !important;
        }
    </style>

    @await Html.PartialAsync("~/Views/Shared/_LoaderIcon.cshtml")

    <script>
    var ReportName = "";
    var viewDashboardUrlAction = "@Url.Action("Dashboards", "Dashboards")";
    var itemViewShareIframeUrl = "@Url.Action("shareItemView", "items")";
    var favoriteItemUrl = "@Url.Action("MakeFavorite", "Items")";
    var addViewUrl = "@Url.Action("onfiltersave", "DashboardViews")";
    var getSavedViewUrl = "@Url.Action("GetViews", "DashboardViews")";
    var getViewParameterUrl = "@Url.Action("GetDashboardViewParameter", "DashboardViews")";
    var deleteViewUrl = "@Url.Action("DeleteView", "DashboardViews")";
    var updateViewUrl = "@Url.Action("UpdateView", "DashboardViews")";
    var pinWidgetToHomepageUrl = "@Url.Action("PinWidgetToHomepage", "Boards")";
    var saveViewPopup = "@Url.Action("SaveView", "DashboardViews")";
    var commentPageUrl = "@Url.Action("CommentPartialView", "Comments")";
    var Commentswidgets = "@Url.Action("WidgetCommentPartialView", "Comments")";
    var addHomepageUrl = "@Url.Action("addhomepage", "Boards")";
    var checkHomepageNameExistUrl = "@Url.Action("checkhomepagenameexist", "Boards")";
    var pinDashboardUrl = "@Url.Action("pinitemtohomepage", "Boards")";
    var isAdmin = "@isAdmin";
    var viewUrl = "@Url.Action("Dashboards", "Dashboards")";
    var getLinkDialogViewUrl = "@Url.Action("GetLinkView", "items")";
    var dataServiceUrl = "@dataServiceUrl";
    var dashboardServerResourceUrl = "@globalAppSettings.SystemSettings.CDNLink";
        var commentSettings = {
            isDashboardCommented: @Html.Raw(ViewBag.IsDashboardCommented),
            widgets: [@Html.Raw(ViewBag.CommentedWidgets)]
        };
        function loadPopup() {
            var dashboardWaitingPopupTemplateId = createLoader("dashboard");
			$("#dashboard").ejWaitingPopup({ template:$("#" + dashboardWaitingPopupTemplateId) });
            $("#dashboard").ejWaitingPopup("show");
            window.location.href = window.location.href.replace(window.location.pathname + window.location.search, "");
        }
        function CommentImageDialogClose() {
            $("#commentImage_popup").ejDialog("close");
            $("#commentImage_popup_image").attr('src', "");
        }
        var sameOrigin;
        try {
            sameOrigin = window.parent.location.host == window.location.host;
        }
        catch (e) {
            sameOrigin = false;
        }
        var isSelfHosted = @Json.Serialize(isSelfHosted);
        var embedConfig = @Html.Raw(Json.Serialize(ViewBag.EmbedConfig));
    </script>

    @if (!isSelfHosted)
    {
        <link rel="prefetch" href="@dataServiceUrl">
    }
</head>

<body id="body" style="width: 100%; height: 100%; overflow: hidden" data-slideshow-mode="@ViewBag.IsSlideshow">
    <environment include="Development,CloudDevelopment">
        <script asp-append-version="true" src="~/js/localizationcontent.js?c=@System.Globalization.CultureInfo.CurrentCulture" defer></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <script asp-append-version="true" src="~/js/localizationcontent.js?c=@System.Globalization.CultureInfo.CurrentCulture" defer></script>
    </environment>
    <input id="favorite_Item" type="hidden" data-item-id="@ViewBag.ItemId" data-parent-id="@ViewBag.ParentId" data-favorite-value="@ViewBag.IsFavorite">
    <input id="dashboard_Comment" type="hidden" data-item-id="@ViewBag.ItemId" data-category-name="@ViewBag.itemDetail.CategoryName" data-item-name="@ViewBag.itemDetail.Name">
    <input id="isMultiDashboard" type="hidden" data-item-id="@ViewBag.IsMultiDashboard" data-parent-id="@ViewBag.ParentId">
    <input id="is_mobile" type="hidden" value="@isMobile.ToString().ToLower()">
    <input id="comment_Type" type="hidden" data-item-id="@ViewBag.DataItemId" data-item-type="@ViewBag.ItemType">
    <input id="item-version" type="hidden" value="@ViewBag.Version" />

    @if (itemDetail.IsSampleData && !isMobile && !ViewBag.IsSlideshow && isUserAuthenticatedInCurrentTenant)
    {
        <environment include="Development,CloudDevelopment">
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/update-template-dashboard.js"></script>
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/signalr/signalr.js"></script>
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/signalr-bundle.js"></script>
        </environment>
        <environment exclude="Development,CloudDevelopment">
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/update-template-dashboard.min.js"></script>
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/signalr/signalr.min.js"></script>
            <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/signalr-bundle.min.js"></script>
        </environment>

        <div class="pull-right" id="sample-data-notification" style="display:none">
            @if (canEdit && permissions[ItemType.Datasource])
            {
                <button id="sample-data-button" type="button" data-placement="bottom" title="[[[This dashboard contains sample data.]]]" data-toggle="tooltip" class="sample-data primary-button" data-access-token="@accessToken" data-dashboard-id="@itemDetail.Id" data-dashboard-name="@itemDetail.Name" data-dashboard-version="@ViewBag.VersionNumber" data-authorize-url="@dataServiceUrl/v1.0/connection/authorize?provider=@(provider)&service=@(service)&token=@(accessToken)&server=@globalAppSettings.SystemSettings.BaseUrl">
                    [[[Connect Your Data]]]
                </button>
            }
            else
            {
                <button type="button" data-placement="bottom" data-html="true" title="[[[This dashboard contains sample data. </br>You need permission to edit this dashboard and create a new data source to connect your data.]]]" data-toggle="tooltip" class="sample-data primary-button disabled-template-button">
                    [[[Connect Your Data]]]
                </button>
            }
        </div>
    }

    <div id="dashboard" style="height: 100%;"></div>
    @if (isMobile)
    {
        <script>
            $(document)
                .ready(function () {
                    //Remove side bar
                    $("ul.options").addClass("displayNone");
                    $("#filter-view").css("display", "none");
                    $("#dashboard-view-toogle").css("display", "none");
                });
        </script>

        <nav id="server-mobile-navbar" class="navbar navbar-inverse">
            <div class="container-fluid">
                <ul class="nav navbar-nav col-xs-12 no-padding no-margin">
                    <li class="col-xs-3 icon">
                        <a href="javascript:void(0)" class="su su-nav-dashboard active"></a>
                    </li>
                    <li class="col-xs-3 icon" id="comment-li">
                        @if (ViewBag.IsDashboardCommented == "true")
                        {
                            <a href="javascript:void(0)" class="su su-with-comment server-comment"></a>
                        }
                        else
                        {
                            <a href="javascript:void(0)" class="su su-without-comment server-comment"></a>
                        }
                    </li>
                    <li class="col-xs-3 icon">
                        <a href="javascript:void(0)" class="su su-filter server-item-view"></a>
                    </li>
                    <li class="col-xs-3 icon" id="view-li">
                        <a href="javascript:void(0)" class="su-view"></a>
                    </li>
                </ul>
            </div>
        </nav>
    }
    @await Html.PartialAsync("_DashboardViews")
    @await Html.PartialAsync("../Items/_SharePermission")

    @if (Context.User.Identity.IsAuthenticated && Context.User != null && Context.User.Identity != null && isUserAuthenticatedInCurrentTenant)
    {
        <div id="commentModuleContainer" class="displayNone" style="background-color: #fff;">
            <iframe id="commentModuleContainer_iframe" class="comment-popup-frame" data-item-id="@ViewBag.ItemId" style="height: 100%; width: 100%;"></iframe>
            <div class="loader-blue loader-icon " id="comment-module-container-loader-icon">
                <svg class="circular">
                    <circle class="path" cx="27" cy="27" r="20" fill="none" stroke-width="4" stroke-miterlimit="10"></circle>
                </svg>
            </div>
        </div>

        <div id="widgetCommentModuleContainer" class="displayNone" style="background-color:  #fff; z-index: 1000001;">
            <iframe id="widgetCommentModuleContainer_iframe" class="comment-popup-frame" style="height: 100%; width: 100%;"></iframe>
            <div class="loader-blue loader-icon " id="widget-comment-module-container-loader-icon">
                <svg class="circular">
                    <circle class="path" cx="27" cy="27" r="20" fill="none" stroke-width="4" stroke-miterlimit="10"></circle>
                </svg>
            </div>
        </div>
    }
    <div id="viewShare_popup" class="col-md-12 DisplayNone">
        <div id="sharepopup_wrapper_WaitingPopup" class="e-waitpopup-sharepopup">
            <div class="loader-blue loader-icon" id="loader-icon">
                <svg class="circular">
                    <circle class="path" cx="27" cy="27" r="20" fill="none" stroke-width="4" stroke-miterlimit="10"></circle>
                </svg>
            </div>
        </div>
        <iframe id="viewShare_popup_iframe" class="EditIframe"></iframe>
    </div>
    <div class="ViewShare_popup_shadow"></div>
    @* ******************* Please add new iframes below this line *************** *@
    <div id="commentImage_popup" class="col-md-12 no-padding hidden">
        <div class="col-lg-12 no-padding" id="PopupContainer">
            <div class="col-md-12">
                <div class="col-xs-12 no-padding" style="float:right">
                    <a href="javascript:void(0);" onclick="CommentImageDialogClose()" class="PopupClose closePopupImage"><span class="su su-close"></span></a>
                </div>
            </div>
            <div class="dialogBody col-xs-12 no-padding">
                <img id="commentImage_popup_image" src="" style="width: 100%;">
            </div>
        </div>
    </div>
    <div id="pin-widget-popup" class="displayNone" data-item-id="@(parentId != null ? parentId : itemId)" data-widget-id="" data-widget-name="">
        <iframe id="pin-widget-popup-iframe" class="" style="height: 100%; width: 100%;"></iframe>
    </div>
    <div id="save-view-popup" class="displayNone" data-item-id="@(parentId != null ? parentId : itemId)" data-widget-id="" data-widget-name="">
        <iframe id="save-view-popup-iframe" class="" style="height: 100%; width: 100%;"></iframe>
    </div>
    <div id="dashboard-homepage-popup" data-item-id="@(parentId != null ? parentId : itemId)" class="displayNone no-padding">
        <form id="dashboard-homepage-form">
            <div class="col-md-12 header-menu">
                <span class="su su-pin head-icon"></span>
                <span class="popup-title">[[[Pin Dashboard]]]</span>
                <a href="javascript:void(0);" title="[[[Close]]]" class="popup-close" onclick="closeDashboardHomepagePopup()"><span class="su su-close"></span></a>
                @if (isCurrentVersion)
                {
                    <div id="dashboard-homepage-name"><div id="sub-title" data-toggle="tooltip" data-placement="bottom" data-original-title="">[[[Name the pinboard and choose whether it should be shown by default]]]</div></div>
                }
            </div>
            @if (!isCurrentVersion)
            {
                <div class="col-md-12 alert alert-danger alert-older-version">
                    [[[You are viewing an older version of the dashboard. Only the latest version of a dashboard can be added to the pinboard.]]]
                    <div id="new-version-link">Click <a href="@currentUrl@symbol@versionLink" target="_blank" style="text-decoration:underline;">[[[here]]]</a> [[[to open the latest version.]]]</div>
                </div>
                <div class="col-xs-12 dialog-footer rightAlign no-right-padding no-left-padding" style="position:relative !important;">
                    <div class="pull-right"></div>
                    <div class="no-padding centerAlign validationArea" id="close">
                        <input title="" type="button" id="version-Alert-button" class="btn secondary-button PopupClose" value="[[[OK]]]" onclick="onAlertDialogClose()" />
                    </div>
                </div>
            }
            else
            {
                <div id="dashboard-homepage-container">
                    <div id="homepage-name-container" class="col-xs-12">
                        @Html.Label("widget-label", "[[[Pinboard name]]]", new { @class = "app-textbox-label homepage-name-label col-xs-4" })
                        <div id="homepage-input" class="col-xs-4">
                            <input type="text" id="homepage-name" name="dashboardhomepagename" class="form-control" maxlength="255" autofocus />
                            <span class="validation-errors"></span>
                        </div>
                    </div>
                    <div class="col-xs-12">
                        @Html.Label("makedefault", "[[[Make default]]]", new { @class = "app-textbox-label col-xs-4", @id = "make-default-label" })
                        <div class="col-xs-4 makedefault switch-align">
                            <span class="material-switch text-left">
                                <input type="checkbox" id="makedefault" name="make-default" />
                                <label for="makedefault" class="label-primary"></label>
                            </span>
                        </div>
                    </div>
                    <div class="col-xs-12" id="filter-container">
                        @Html.Label("keepfilter", "[[[Keep filters]]]", new { @class = "app-textbox-label col-xs-4", @id = "keep-filter-label" })
                        <div class="col-xs-4 keepfilter switch-align">
                            <span class="material-switch text-left">
                                <input type="checkbox" id="keepfilter" name="keep-filter" checked />
                                <label for="keepfilter" class="label-primary"></label>
                            </span>
                        </div>
                        <div id="info-tag">
                            <span id="filter-info" class="su su-info info-popup" data-toggle="popover" data-placement="top" data-content='[[[When "Keep filters" is switched on, the dashboard will be added to the pinboard along with the applied filters.]]]'></span>
                        </div>
                    </div>
                    <div id="dashboard-homepage-button">
                        <div id="button-container">
                            <input type="button" id="dashboard-homepage-save-button" class="btn primary-button" value="[[[Save]]]">
                            <input type="button" id="dashboard-homepage-cancel-button" class="btn secondary-button" value="[[[Cancel]]]" onclick="closeDashboardHomepagePopup()">
                        </div>
                    </div>
                </div>
            }
        </form>
    </div>
    <div id="success-alert">
        <div id="image-container">
            <div class="image-holder">
                <span class="su su-tick" alt="Success Icon"></span>
            </div>
        </div>
        <div id="message">
            <h1 id="message-header"></h1>
            <span id="message-content"></span>
        </div>
    </div>
    <div id="warning-alert">
        <div id="image-container">
            <span class="su su-warning-alt" alt="Warning Icon"></span>
        </div>
        <div id="message" class="div-close">
            <h1 id="message-header"></h1>
            <span id="message-content"></span>
        </div>
        <div class="close-div">
            <span id="close-content">[[[Close]]]</span>
        </div>
    </div>

    <div id="progress-alert-container">

    </div>
</body>

<script type="text/javascript">
    var userId = "@userId";
    var userName = "@userName";
    var viewId = "@ViewBag.ViewId";
    var item_Id = "@ViewBag.ItemId";
    var isMultiDashboard = "@ViewBag.IsMultiDashboard";
    var childDesignerId = "@ViewBag.ChildDesignerId";
    var enableComment = "@enableComment";
    var isUserAuthenticated="@isUserAuthenticated";
    var pageurl = "@requestUrl";
    var baseUrl = "@globalAppSettings.SystemSettings.BaseUrl";
    var dashboardServiceUrl = "@globalAppSettings.SystemSettings.InternalAppDataServiceUrl";
    var token = "@accessToken";
    var parentRefUrl = (window.location != window.parent.location) ? document.referrer : document.location.href.replace(document.location.pathname + document.location.search, "");
    if(parentRefUrl == ""){
        var parentUrl = "";
    }
    else {
        var parentUrl = parentRefUrl.match(/:\/\/(.[^/]+)/)[1];
    }
    var iframeRefUrl=window.location.href;
    var iframeUrl=iframeRefUrl.match(/:\/\/(.[^/]+)/)[1];
    var canEdit = "@canEdit";
    var showMyDashboards = "@ViewBag.ShowMyDashboards";
    var isSlideshow = "@ViewBag.IsSlideshow".toLowerCase() == "true" ? true : false;

    function IframeLoad() {
        if(iframeUrl == parentUrl)
        {
            if((sameOrigin ? window.parent.$("#item-viewer").data("ejWaitingPopup") : window.$("#item-viewer").data("ejWaitingPopup")) != undefined) {
                sameOrigin ? window.parent.$("#item-viewer").ejWaitingPopup("hide") : window.$("#item-viewer").ejWaitingPopup("hide");
            }
        }
    }
    $(document).ready(function () {
        if (isSlideshow) {
            //Remove side bar
            $("ul.options").addClass("displayNone");
            $("#filter-view").css("display", "none");
            $("#dashboard-view-toogle").css("display", "none");
            $("#dashboard").css("margin-right", "0").css("width", $(window).width() + "px");
        }

		IframeLoad();

        $(window).resize(function() {
            ResizePopup();
            if (isSlideshow) {
                $("#dashboard").css("height", $(window).height() + "px").css("width", $(window).width() + "px");
            } else {
                if($("#is_mobile").val() == "true"){
                    $("#dashboard").css("height", $(window).height() - 50 + "px");
                }
                if ((sameOrigin ? parent.$(".su-sidebar-collapse").length : $(".su-sidebar-collapse").length) <= 0){
                    setWidth();
                } else {
                    if ($("#comments, #filters, #views").hasClass('active')) {
                        $("#dashboard").css("width", $(window).width() - 450 + "px");
                    }
                }
            }
        });

        $(window).bind('popstate',
            function(e) {
                applyFilter();
            });

        window.addEventListener('message', receiveMessage, false);
        function receiveMessage(event) {
            if (event.data === 'filter') {
                applyFilter();
            }
        }

        var dashboardViewWaitingPopupTemplateId = createLoader("dashboard-view-toogle");
		var waitingpopup = $("#dashboard-view-toogle").ejWaitingPopup({ template:$("#" + dashboardViewWaitingPopupTemplateId) });
        dashboardviewerObj = $('#dashboard').data("ejDashboardViewer");
        window.onresize = SavedViewHeight;
        var windowwidth = $(window).width();

        ReportName = "@ViewBag.ItemName";
        var ReportDescription = "@ViewBag.ItemDescription";
        var browser = ej.browserInfo();

        var dashboardDialogHeight = "";
        var dashboardDialogWidth = "";
        var widgetDialogHeight = "";
        var widgetDialogWidth = "";
        if ("@isCurrentVersion" == "True") {
            dashboardDialogHeight = "306px";
            dashboardDialogWidth = "450px";
            widgetDialogHeight = "360px";
            widgetDialogWidth = "400px";
        }
        else {
            dashboardDialogHeight = "180px";
            dashboardDialogWidth = "480px";
            widgetDialogHeight = "185px";
            widgetDialogWidth = "450px";
        }

        $("#pin-widget-popup").ejDialog({
            width: widgetDialogWidth,
            height: widgetDialogHeight,
            showOnInit: false,
            allowDraggable: true,
            enableResize: false,
            title: "[[[Pin Item to the Homepage]]]",
            enableModal: true,
            showHeader: false
        });
        var pinWidgeWaitingPopupTemplateId = createLoader("pin-widget-popup_wrapper");
		$("#pin-widget-popup_wrapper").ejWaitingPopup({ template:$("#" + pinWidgeWaitingPopupTemplateId) });

        $("#dashboard-homepage-popup").ejDialog({
            width: dashboardDialogWidth,
            height: dashboardDialogHeight,
            showOnInit: false,
            allowDraggable: true,
            enableResize: false,
            title: "[[[Set Dashboard as Homepage]]]",
            enableModal: true,
            showHeader: false
        });
        var dashboardHomepageWaitingPopupTemplateId = createLoader("dashboard-homepage-popup_wrapper");
		$("#dashboard-homepage-popup_wrapper").ejWaitingPopup({ template:$("#" + dashboardHomepageWaitingPopupTemplateId) });

        if (browser != null && browser.name === "msie" && parseFloat(browser.version) <= 8.0) {
            var divString = '<div style="top:20%;width:575px;margin:0px auto;position:relative;text-align:center">' +
                '<div style="padding:35px 68px 35px 68px;" class="e-dbrd-control-container">' +
                '<p style="font-size:18px;font-weight:bold">[[[Internet Explorer 8 and Internet Explorer 11 in Enterprise Mode are not supported]]]</p>' +
                '<p style="font-size:10px">[[[Please upgrade to a newer browser if you are using IE8 or turn off Enterprise Mode if you are using IE11 in Enterprise Mode.]]]</p>' +
                '<p style="text-align:left;margin-top:20px">[[[Supported Browsers:]]]</p><div class="alert-ie">' +
                '<div><span><img  src="@Url.Content("~/dashboardservice/themes/common-images/IE.png")" /></span><p>[[[Internet Explorer]]] 9+</p> </div> ' +
                '<div><span><img  src="@Url.Content("~/dashboardservice/themes/common-images/Edge.png")" /> </span><p>[[[Microsoft Edge]]]</p></div>' +
                '<div><span><img  src="@Url.Content("~/dashboardservice/themes/common-images/Firefox.png")" /></span><p>[[[Mozilla Firefox]]] 22+</p></div>' +
                '<div><span><img  src="@Url.Content("~/dashboardservice/themes/common-images/Chrome.png")" /></span><p>[[[Chrome]]] 17+</p></div>' +
                '<div><span><img  src="@Url.Content("~/dashboardservice/themes/common-images/Opera.png")" /></span><p>[[[Opera]]] 12+</p></div>' +
                '<div><span><img  src="@Url.Content("~/dashboardservice/themes/common-images/Safari.png")" /></span><p>[[[Safari]]] 5+</p></div></div></div>'
            var body = document.getElementById("dashboard");
            body.style.backgroundColor = "white";
            body.innerHTML = divString;
        } else {
            if (viewId != null && viewId != "")
            {
                var viewName = "";
                var canUpdate = false;
                var link = "";
                $.ajax({
                    type: "POST",
                    url: getViewParameterUrl,
                    data: { ViewId: viewId, UserId: userId, UserName: userName, itemid: item_Id, IsMultiDashboard: isMultiDashboard, parentDashboardId: "@parentId" },
                    success: function (data) {
                        var viewDetails;
                        if (data.viewDetails != null && data.viewDetails != '') {
                            if (data.isPublic) {
                                viewDetails = data.viewDetails;
                                viewName = viewDetails.ViewName;
                                parameter = decodeURI(viewDetails.QueryString);
                                canUpdate = viewDetails.CanEdit;
                            } else {
                                viewDetails = JSON.parse(data.viewDetails);
                                viewName = viewDetails.ViewName;
                                parameter = decodeURI(viewDetails.QueryString);
                                canUpdate = viewDetails.CanEdit;
                            }
                        }
                        else {
                            window.location.href = window.location.href.replace(window.location.search, "");
                        }
                        $("#dashboard").ejDashboardViewer({
                            accessToken: token,
                            actionBegin: "fnOnDashboardBegin",
                            serviceUrl: "@dashboardServiceUrl",
                            serverUrl: baseUrl,
                            _enableHyperLinkOnErrorMessage: false,
                            cdnFilePath: "@globalAppSettings.SystemSettings.UseCDN.ToString().ToLower()" == "true" ? "@cdnLink" + "/scripts/viewer" : "",
                            dashboardPath: "@_itemId/@ViewBag.Version",
                            reportName: ReportName,
                            //enableDashboardScaling: isSlideshow, // Enable scaling when dashboards rendering from slideshow
                            reportDescription: ReportDescription,
                            showGetLinkIcon: !isSlideshow,
                            enableExport: true,
                            enablePrint: false,
                            enableViewData: false,
                            enableFilterOverview: !isSlideshow,
                            localeSettings: {
                                resourcePath: "",
                                culture: "@ViewBag.Culture"
                              },
                            interactionSettings: {
                                allowHistoryMaintenance: true,
                                handleHistoryEvent: false
                            },
                            _selectedTabGuid : childDesignerId,
                            tabActive: function (args) {
                                if (isSlideshow) {
                                    return;
                                }
                                $("#dashboard").data("ejDashboardViewer").model.dashboardCreated = "";
                                item_Id = $("#dashboard").data("ejDashboardViewer")._getCurrentDashboardGuid();
                                $("#dashboard_Comment").attr("data-item-id", item_Id);
                                $("#favorite_Item").attr("data-item-id", item_Id);
                                $("#favorite_Item").attr("data-favorite-value", "false");
                                if ($("#comments").hasClass('active')) {
                                    var itemId = $("#dashboard_Comment").attr("data-item-id");
                                    window.frames[0].GetAllComments(itemId, "dashboard", itemId, "desc", isMultiDashboard);
                                }
                                resetViewPanel();
                                filterView();
                                $.ajax({
                                    type: "POST",
                                    url: "@Url.Action("GetCommentedWidgets", "DashboardViews")",
                                    data: {
                                        designerId: item_Id,
                                        parentId : $("#favorite_Item").attr("data-parent-id")
                                    },
                                    success: function(data) {
                                        var commentObj = { isDashboardCommented: data.IsDashboardCommented.toLowerCase() == "true", isWidgetCommented: true, widgets: data.Result };
                                        if(data.IsDashboardCommented.toLowerCase() == "true")
                                        {
                                            parent.$("ul.options li#comments span.su-without-comment").addClass("su-with-comment").removeClass("su-without-comment");
                                        }
                                        else{
                                            parent.$("ul.options li#comments span.su-with-comment").addClass("su-without-comment").removeClass("su-with-comment");
                                        }
                                        $("#dashboard").ejDashboardViewer("instance").applyComments(commentObj);
                                        $("#dashboard").ejDashboardViewer("instance").option("favoriteSettings.isFavorite", data.IsDashboardFavorite.toLowerCase() == "true");
                                        $("#favorite_Item").attr("data-favorite-value", data.IsDashboardFavorite.toLowerCase());
                                        $('#dashboard').data("ejDashboardViewer").model.filterOverviewSettings.viewName = null;
                                        $('#dashboard').data("ejDashboardViewer").model.filterOverviewSettings.viewId = null;
                                    }
                                });

                                var currentUrl = parent.$("#current-url").attr("data-url");
                                var tabName = $("#dashboard").data("ejDashboardViewer").getCurrentTab().tabName;
                                var stateObj = window.top.history.state;
                                if(parent.window.innerWidth >= 1041 && history.pushState != undefined) {
                                    if (currentUrl != undefined) {
                                        var currentQuery = getQueryWithoutViewCommentTab(parent.window.location.search.substring(1));
                                        window.top.history.replaceState(stateObj, "DashboardViewer", parent.window.location.pathname + currentQuery + "&tab=" + tabName);
                                    } else {
                                        var currentQuery = getQueryWithoutViewCommentTab(window.location.search.substring(1));
                                        if(currentQuery === ""){
                                            window.top.history.replaceState(stateObj, "DashboardViewer", window.location.pathname + "?tab=" + tabName);
                                        }
                                        else{
                                            window.top.history.replaceState(stateObj, "DashboardViewer", window.location.pathname + currentQuery +"&tab=" + tabName);
                                        }
                                    }
                                }
                            },
                            onFilterOverviewUpdated:"onFilterOverviewUpdated",
                            filterParameters: decodeURI(parameter),
                            onDashboardCommented: "openDashboardComment",
                            onWidgetCommented: "openWidgetComment",
                            onCommentDialogClosing: "closeComment",
                            _itemViewId:"@ViewBag.ViewId",
                           _isPublic : @isPublic,
                            _itemId: "@_itemId",
                            _openShareDialog:"ShareView",
                            allowComment: @enableComment,
                            commentSettings: {
                                isDashboardCommented: @Html.Raw(ViewBag.IsDashboardCommented),
                                widgets: [@Html.Raw(ViewBag.CommentedWidgets)]
                            },
                            favoriteSettings:{
                                enabled: @enableComment,
                                isFavorite:"@(ViewBag.IsFavorite.ToString().ToLower())"=="true",
                            },
                            beforeDashboardIconRendered: "beforeDashboardIconRendered",
                            beforeTabMenuCreate: function(event){
                                var pinIcon = {"id":"pin-parent-dashboard", "text": "[[[Pin Dashboard]]]", "sprite": "su su-pin"};
                                if ($("#is_mobile").val() == "false" && !isSlideshow)
                                {
                                    if(event.model._isPublic== false){
                                        event.menuData.push(pinIcon);
                                    }
                                    else if (event.model._isPublic== true && isUserAuthenticated.toLowerCase()=="true") {
                                        event.menuData.push(pinIcon);
                                    }
                                    }
                            },
                            beforeWidgetIconRendered: function (event) {
                                $("#sample-data-notification").show();
                                if (isSlideshow) {
                                    event.iconsinformation = [];
                                    event.iconsinformation.length = 0;
                                    return;
                                }

                                if(event.model._isPublic== false){
                                    if(!event.isFilterWidget){
                                        event.iconsinformation.unshift({ "classname": "su su-pin icon","name":"Pin Widget","datatooltip":"[[[Pin Widget]]]", "marginright": "-18px", "margintop":"4px"});
                                    }
                                } else if (event.model._isPublic== true && isUserAuthenticated.toLowerCase()=="true") {
                                    if(!event.isFilterWidget){
                                        event.iconsinformation.unshift({ "classname": "su su-pin icon","name":"Pin Widget","datatooltip":"[[[Pin Widget]]]", "marginright": "-18px", "margintop":"4px"});
                                    }
                                }
                            },
                            onMenuIconClick: function(information){
                                if(typeof(information.name)!= "undefined" && information.name.toLowerCase() == "pin widget"){
                                    $("#pin-widget-popup").ejDialog("open");
                                    $("#pin-widget-popup_wrapper").ejWaitingPopup("show");
                                    $("#pin-widget-popup-iframe").attr("src", pinWidgetToHomepageUrl + "?itemId=" + $("#pin-widget-popup").attr("data-item-id") + "&version=" + @ViewBag.Version);
                                    $("#pin-widget-popup").attr("data-widget-id",information.widgetId).attr("data-widget-name",information.headertext);
                                    $("#pin-widget-popup").attr("data-tab-id",information.tabId != null ? information.tabId : null);
                                }
                            },
                            onBannerIconClick: function(information){
                                if(typeof(information.name)!= "undefined" && information.name.toLowerCase() == "pin dashboard"){
                                    $("#dashboard-homepage-popup").ejDialog("open");
                                    $("#dashboard-homepage-popup_wrapper").ejWaitingPopup("show");
                                    $("#dashboard-homepage-container #homepage-name").val(information.headertext);
                                    $("#filter-info").popover();
                                    $("#dashboard-homepage-popup_wrapper").ejWaitingPopup("hide");
                                }
                                else if (typeof (information.name) != "undefined" && information.name.toLowerCase() == "edit dashboard") {
                                    showEditDashboardWaitingPopup();
                                    var url = encodeURI("@Url.Action("DashboardDesigner", "Designer")" + "/@itemDetail.Id/@itemDetail.CategoryName/@itemDetail.Name");
                                    parent.window.location.href = url;
                                }
                                else if(typeof(information.name)!= "undefined" && information.name.toLowerCase() == "my dashboards"){
                                    var url = encodeURI("@Url.Action("Dashboards", "Dashboards")" + "?view=all");
                                    parent.window.location.href = url;
                                }
                            },
                            onFavoriteStateChange: "updatefavorite",
                            dashboardCreated : "openComments",
                            resizeDashboard :"closeCommentOnResize",
                            filterPanelSettings: {
                                showIcon: false,
                                filterPanelId: "filter-view",
                                showHeader: false
                            },
                            filterOverviewSettings: {
                                showSaveIcon: isSlideshow ? false : ($("#is_mobile").val() == "false" ? viewDetails.CanEdit : false),
                                showSaveAsIcon: isSlideshow ? false : ($("#is_mobile").val() == "false" ? isUserAuthenticated == "true" : false),
                                showViewSavedFilterIcon: !isSlideshow,
                                viewName: viewDetails.ViewName,
                                viewId : "@ViewBag.ViewId"
                            },
                            onSaveFilter: "SaveFilter",
                            onSaveAsFilter: "SaveFilter",
                            onViewSavedFilters: "openViewSection",
                            _exportSettings: {
                                canExportImage: !isSlideshow,
                                canExportPdf: !isSlideshow,
                                canExportExcel: !isSlideshow,
                                canExportCsv: !isSlideshow
                            }
                        });

                        $("#current-view").show();
                        $("#current-view").html("");
                        if (canUpdate) {
                            $("#saved-filter-update").show();
                            $("#update-view").addClass("pointer-events");
                            $("#update-view").css("opacity",0.5);
                        } else {
                            $("#saved-filter-Saveas").show();
                        }
                        $("#save-section").hide();
                        $("#save-lable-section label").html("");

                        link = '<a class="saved-view-link txt-overflow" href="' +
                            pageurl +
                            '?viewid=' +
                            viewId +
                            '" target="_blank" data-toggle="tooltip" data-original-title="' + viewName + '">' +
                            viewName +
                            '</a>';
                        $("#save-lable-section label").append(link);
                        $("#save-lable-section").show();
                        $("#new-save").hide();
                        $("#unsaved-filter,#unsaved-filter-title").show();
                        $('.saved-view[viewid="' + viewId + '"').css("background-color", "#f9f9f9");
                    },
                    error: function () {
                        window.location.href = window.location.href.replace(window.location.search, "");
                    }
                });
            }else {
                $("#dashboard").ejDashboardViewer({
                    accessToken : token,
                    actionBegin: "fnOnDashboardBegin",
                    serviceUrl: "@dashboardServiceUrl",
                    serverUrl: baseUrl,
                    _enableHyperLinkOnErrorMessage: false,
                    cdnFilePath: "@globalAppSettings.SystemSettings.UseCDN.ToString().ToLower()" == "true" ? "@cdnLink" + "/scripts/viewer" : "",
                    dashboardPath: "@_itemId/@ViewBag.Version",
                    reportName: ReportName,
                    reportDescription: ReportDescription,
                    //enableDashboardScaling: isSlideshow, // Enable scaling when dashboards rendering from slideshow
                    showGetLinkIcon: !isSlideshow,
                    enableExport: true,
                    enablePrint: false,
                    enableViewData: false,
                    enableFilterOverview: !isSlideshow,
                    _selectedTabGuid : childDesignerId,
                    tabActive: function (args) {
                        if (isSlideshow) {
                            return;
                        }

                        $("#dashboard").data("ejDashboardViewer").model.dashboardCreated = "";
                        item_Id = $("#dashboard").data("ejDashboardViewer")._getCurrentDashboardGuid();
                        $("#dashboard_Comment").attr("data-item-id", item_Id);
                        $("#favorite_Item").attr("data-item-id", item_Id);
                        $("#favorite_Item").attr("data-favorite-value", "false");
                        if ($("#comments").hasClass('active')) {
                            var itemId = $("#dashboard_Comment").attr("data-item-id");
                            window.frames[0].GetAllComments(itemId, "dashboard", itemId, "desc", isMultiDashboard);
                        }
                        resetViewPanel();
                        filterView();
                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("GetCommentedWidgets", "DashboardViews")",
                            data: {
                            designerId: item_Id,
                            parentId : $("#favorite_Item").attr("data-parent-id")
                            },
                            success: function(data) {
                                var commentObj = { isDashboardCommented: data.IsDashboardCommented.toLowerCase() == "true", isWidgetCommented: true, widgets: data.Result };
                                if(data.IsDashboardCommented.toLowerCase() == "true")
                                {
                                    parent.$("ul.options li#comments span.su-without-comment").addClass("su-with-comment").removeClass("su-without-comment");
                                }
                                else{
                                    parent.$("ul.options li#comments span.su-with-comment").addClass("su-without-comment").removeClass("su-with-comment");
                                }
                                $("#dashboard").ejDashboardViewer("instance").applyComments(commentObj);
                                $("#dashboard").ejDashboardViewer("instance").option("favoriteSettings.isFavorite", data.IsDashboardFavorite.toLowerCase() == "true");
                                $("#favorite_Item").attr("data-favorite-value", data.IsDashboardFavorite.toLowerCase());
                                $('#dashboard').data("ejDashboardViewer").model.filterOverviewSettings.viewName = null;
                                $('#dashboard').data("ejDashboardViewer").model.filterOverviewSettings.viewId = null;
                            }
                        });

                        var currentUrl = parent.$("#current-url").attr("data-url");
                        var tabName = $("#dashboard").data("ejDashboardViewer").getCurrentTab().tabName;
                        var stateObj = window.top.history.state;
                        if(parent.window.innerWidth >= 1041 && history.pushState != undefined) {
                            if (currentUrl != undefined) {
                                var currentQuery = getQueryWithoutViewCommentTab(parent.window.location.search.substring(1));
                                window.top.history.replaceState(stateObj, "DashboardViewer", parent.window.location.pathname + currentQuery + "&tab=" + tabName);
                            } else {
                                var currentQuery = getQueryWithoutViewCommentTab(window.location.search.substring(1));
                                if(currentQuery === ""){
                                    window.top.history.replaceState(stateObj, "DashboardViewer", window.location.pathname + "?tab=" + tabName);
                                }
                                else{
                                    window.top.history.replaceState(stateObj, "DashboardViewer", window.location.pathname + currentQuery +"&tab=" + tabName);
                                }
                            }
                        }
                    },
                    localeSettings: {
                        resourcePath: "",
                        culture: "@ViewBag.Culture"
                    },
                    interactionSettings: {
                        allowHistoryMaintenance: true,
                        handleHistoryEvent: false
                    },
                    onFilterOverviewUpdated:"onFilterOverviewUpdated",
                    onDashboardCommented: "openDashboardComment",
                    onWidgetCommented: "openWidgetComment",
                    onCommentDialogClosing: "closeComment",
                    _itemViewId: "@ViewBag.ViewId",
                     _isPublic : @isPublic,
                    _itemId: "@_itemId",
                    _openShareDialog:"ShareView",
                    allowComment: @enableComment,
                    commentSettings: {
                        isDashboardCommented: @Html.Raw(ViewBag.IsDashboardCommented),
                        widgets: [@Html.Raw(ViewBag.CommentedWidgets)]
                    },
                    favoriteSettings:{
                        enabled: @enableComment,
                        isFavorite:"@(ViewBag.IsFavorite.ToString().ToLower())"=="true",
                    },
                    beforeDashboardIconRendered: "beforeDashboardIconRendered",
                    beforeTabMenuCreate: function(event){
                        var pinIcon = {"id":"pin-parent-dashboard", "text": "[[[Pin Dashboard]]]", "sprite": "su su-pin"};
                        if ($("#is_mobile").val() == "false" && !isSlideshow)
                        {
                            if(event.model._isPublic== false){
                                event.menuData.push(pinIcon);
                            }
                            else if (event.model._isPublic== true && isUserAuthenticated.toLowerCase()=="true") {
                                event.menuData.push(pinIcon);
                            }
                            }
                    },
                    beforeWidgetIconRendered: function (event) {
                        $("#sample-data-notification").show();

                        if (isSlideshow) {
                            event.iconsinformation = [];
                            event.iconsinformation.length = 0;
                            return;
                        }

                        if ($("#is_mobile").val() == "false" && !isSlideshow){
                            if(event.model._isPublic== false){
                                if(!event.isFilterWidget){
                                    event.iconsinformation.unshift({ "classname": "su su-pin icon","name":"Pin Widget","datatooltip":"[[[Pin Widget]]]", "marginright": "-18px", "margintop":"4px"});
                                }
                            } else if (event.model._isPublic== true && isUserAuthenticated.toLowerCase()=="true") {
                                if(!event.isFilterWidget){
                                    event.iconsinformation.unshift({ "classname": "su su-pin icon","name":"Pin Widget","datatooltip":"[[[Pin Widget]]]", "marginright": "-18px", "margintop":"4px"});
                                }
                            }
                        }
                    },
                    onMenuIconClick: function(information){
                        if(typeof(information.name)!= "undefined" && information.name.toLowerCase() == "pin widget"){
                            $("#pin-widget-popup").ejDialog("open");
                            $("#pin-widget-popup_wrapper").ejWaitingPopup("show");
                            $("#pin-widget-popup-iframe").attr("src", pinWidgetToHomepageUrl + "?itemId=" + $("#pin-widget-popup").attr("data-item-id")+ "&version=" + @ViewBag.Version);
                            $("#pin-widget-popup").attr("data-widget-id",information.widgetId).attr("data-widget-name",information.headertext);
                            $("#pin-widget-popup").attr("data-tab-id",information.tabId != null ? information.tabId : null);
                        }
                    },
                    onBannerIconClick: function(information){
                        if(typeof(information.name)!= "undefined" && information.name.toLowerCase() == "pin dashboard"){
                            $("#dashboard-homepage-popup").ejDialog("open");
                            $("#dashboard-homepage-popup_wrapper").ejWaitingPopup("show");
                            $("#dashboard-homepage-container #homepage-name").val(information.headertext);
                            $("#dashboard-homepage-container #filter-info").popover();
                            $("#dashboard-homepage-popup_wrapper").ejWaitingPopup("hide");
                        }
                        else if (typeof (information.name) != "undefined" && information.name.toLowerCase() == "edit dashboard") {
                            showEditDashboardWaitingPopup();
                            var url = encodeURI("@Url.Action("DashboardDesigner", "Designer")" + "/@itemDetail.Id/@itemDetail.CategoryName/@itemDetail.Name");
                            parent.window.location.href = url;
                        }
                        else if(typeof(information.name)!= "undefined" && information.name.toLowerCase() == "my dashboards"){
                            var url = encodeURI("@Url.Action("Dashboards", "Dashboards")" + "?view=all");
                            parent.window.location.href = url;
                        }
                    },
                    onFavoriteStateChange: "updatefavorite",
                    dashboardCreated : "openComments",
                    resizeDashboard :"closeCommentOnResize",
                    filterPanelSettings: {
                        showIcon: false,
                        filterPanelId: "filter-view",
                        showHeader: false
                    },
                    filterOverviewSettings: {
                        showSaveIcon: isSlideshow ? false : ($("#is_mobile").val() == "false" ? isUserAuthenticated == "true" : false),
                        showSaveAsIcon: isSlideshow ? false : ($("#is_mobile").val() == "false" ? isUserAuthenticated == "true" : false),
                        showViewSavedFilterIcon: !isSlideshow,
                        viewName: null,
                        viewId : null
                    },
                    onSaveFilter: "SaveFilter",
                    onSaveAsFilter: "SaveFilter",
                    onViewSavedFilters: "openViewSection",
                    _exportSettings: {
                        canExportImage: !isSlideshow,
                        canExportPdf: !isSlideshow,
                        canExportExcel: !isSlideshow,
                        canExportCsv: !isSlideshow
                    }
                });
            }
        }
        setWidth();
        if(iframeUrl !== parentUrl) {
            var obj = $("#dashboard").ejDashboardViewer("instance");
            obj.model.interactionSettings.allowHistoryMaintenance = false;
            obj.model.interactionSettings.handleHistoryEvent = false;
        }
    });

    $(document).on("click", ".close-div", function () {
        parent.$('#warning-alert').fadeOut();
    });

    function setWidth() {
        if (isSlideshow) {
            $("#dashboard").css("width", $(window).width() + "px");
        } else {
            $("#dashboard").css("width", $(window).width() - 40 + "px");
            if ($("#comments, #filters, #views").hasClass('active')) {
                $("#dashboard").css("width", $(window).width() - 450 + "px");
            }
        }
    }

    function applyFilter() {
        var url = window.parent.location.search;
        var tabName = getUrlQueryVariable(url,"tab");
        if (tabName != undefined && tabName != "") {
            $("#dashboard").data("ejDashboardViewer").selectTabByName(decodeURI(tabName));
        } else if (isMultiDashboard.toLowerCase() === "true"){
            $("#dashboard").data("ejDashboardViewer").selectTabByIndex(0);
        }

        var stateObj = window.top.history.state;
        if (stateObj != undefined && JSON.stringify(stateObj) !== JSON.stringify({})) {
            var currentViewId = JSON.parse(stateObj)['sync-dbrd-key'];
            if (currentViewId != undefined && currentViewId != "") {
                $("#dashboard").data("ejDashboardViewer").loadHistoryData(currentViewId);
            }
        }
    }

    function beforeDashboardIconRendered(args){
        if(!ej.isNullOrUndefined(args) && !ej.isNullOrUndefined(args.iconsinformation)) {
            var index = null;
            for(var i=0; i < args.iconsinformation.length; i++) {
                if(args.iconsinformation[i].name === "comment") {
                    index = i;
                    break;
                }
            }
            if(!ej.isNullOrUndefined(index)) {
                args.iconsinformation.splice(index, 1);
            }
        }

        if ($("#is_mobile").val() == "false") {
            if (!isSlideshow) {
                args.iconsinformation.unshift({ "classname": "su su-maximize-1 icon tv-mode-icon", "name": "Fullscreen", "datatooltip": "[[[Fullscreen]]]", "margintop": "14px" });
                if(args.model._isPublic== false){
                    args.iconsinformation.push({ "classname": "su su-pin icon", "name": "Pin Dashboard", "datatooltip": "[[[Pin Dashboard]]]", "margintop": "14px", "marginright": "13px"});
                } else if (args.model._isPublic== true && isUserAuthenticated.toLowerCase()=="true") {
                    args.iconsinformation.push({ "classname": "su su-pin icon", "name": "Pin Dashboard", "datatooltip": "[[[Pin Dashboard]]]", "margintop": "14px", "marginright": "13px"});
                }

                if (isUserAuthenticated.toLowerCase() == "true" && canEdit.toLowerCase() == "true") {
                    args.iconsinformation.push({ "classname": "su su-edit icon","name":"Edit Dashboard","datatooltip":"[[[Edit Dashboard]]]", "margintop":"13px", "marginright":"24px"});
                }
                if (isUserAuthenticated.toLowerCase() == "true" && showMyDashboards.toLowerCase() == "true") {
                    args.iconsinformation.push({ "classname": "e-dbrd-banner-text-icon","content":"My Dashboards","name":"My Dashboards","datatooltip":"[[[My Dashboards]]]", "margintop":"8px", "marginright":"12px"});
                }
            }
        }
    }

    function getUrlQueryVariable(url, variable) {
        var query = url.substring(url.indexOf('?') + 1);
        var vars = query.split("&");
        for (var i = 0; i < vars.length; i++) {
            var pair = vars[i].split("=");
            if (pair[0] == variable) { return pair[1]; }
        }
        return null;
    }

    function getQueryWithoutViewCommentTab(queryString) {
        var returnString = '', queries, temp, i, l;
        if (queryString !== "")
        {
            queries = queryString.split("&");
            for ( i = 0, l = queries.length; i < l; i++ ) {
                temp = queries[i].split('=');
                if (temp[0].toLowerCase() !== "tab" && temp[0].toLowerCase() !== "viewid" && temp[0].toLowerCase() !== "comment" && temp[0] !== "filterQuery"){
                    returnString += (returnString === '' ? '?':'&') + queries[i];
                }
            }
        }
        return returnString;
    }

    function RefreshDashobardData() {
        $('#dashboard').data("ejDashboardViewer").refreshData();
    }

    //Apply scaling when previewing the dashboards in slideshow
    function applyScaling(enable) {
        var dashboardObj = $('#dashboard').data('ejDashboardViewer');
        dashboardObj.option('enableDashboardScaling', enable);
    }

    function showEditDashboardWaitingPopup() {
        var feedbackWaitingPopupTemplateId = createLoader("body");
        $("#body").ejWaitingPopup({ template: $("#" + feedbackWaitingPopupTemplateId) });
        $("#body").ejWaitingPopup({ text: 'Preparing the dashboard to edit' }).ejWaitingPopup("show");
        var bodyWaitingPopup = $("#body_WaitingPopup");
        bodyWaitingPopup.addClass("bg-color-white").css("opacity", "1");
        bodyWaitingPopup.find("#body-loader-icon").css("top", "39%");
        bodyWaitingPopup.find(".e-text").css("top", "39%").css("margin-top", "30px").css("font-size", "21px").css("font-family", "Roboto");
    }

    //prefetching designer resources
     window.onload = function () {
         var preloadScripts = @Json.Serialize(preloadScriptFiles);
        var preloadStyles =  @Json.Serialize(preloadStyleFiles);
        preloadScripts.push("@dashboardDesignerResourceUrl/cdn/scripts/designer/ej1.web.all.min.js");
        preloadScripts.push("@dashboardDesignerResourceUrl/cdn/scripts/designer/ej2.web.all.min.js");
        PreloadResources(preloadScripts, "script");
        PreloadResources(preloadStyles, "style");
        }
        </script>
    </html>