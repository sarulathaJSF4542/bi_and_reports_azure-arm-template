@inject ServerPrincipal _identityResponse
@{
    var gridName = ViewBag.gridName;
    var permissionData = ViewBag.Permissions;
    var userId = _identityResponse.User.UserId;
    var globalAppSettings = _globalAppSettings;
    var isMobile = new DeviceDetection(Context).IsMobile;
    var query = ViewBag.SearchQuery;
    var customUI = globalAppSettings.SystemSettings.CustomUI;
    var schemes = customUI?.Profiles != null ? customUI.Schemes.Where(x => x.Name == customUI.Profiles[0].DataSources.Scheme).FirstOrDefault() : null;
}
<script>
    var copyIframeUrl = "@Url.Action("copyviewitem", "items")";
    var moveIframeUrl = "@Url.Action("moveviewitem", "items")";
    var versionIframeUrl = "@Url.Action("itemversion", "items")";
    var deleteConfirmationUrl = "@Url.Action("deleteconfirmation", "items")";
    var deleteItemUrl = "@Url.Action("deleteitem", "items")";
    var editFilePopupUrl = "@Url.Action("getfiledetails", "files")";
    var makePublicUrl = "@Url.Action("makeitempublic", "items")";
    var removePublicUrl = "@Url.Action("RemovePublic", "items")";
    var designerUrl = "@Url.Action(globalAppSettings.SystemSettings.InstallationFolder+ "dashboarddesigner.exe", "dashboarddesigner")";
    var favoriteItemUrl = "@Url.Action("MakeFavorite", "items")";
    var addWidgetUrl = "@Url.Action("addwidget", "widgets")";
    var dashboardDesignerUrl = "@Url.Action("DashboardDesigner", "Designer")";
    var checkDashboardCreationLimit = "@Url.Action("CheckDashboardCreationLimit", "Designer")";
    var i_am_ie9 = false;
</script>
<!--[if LT IE  10]>
        <script>
            i_am_ie9 = true;
        </script>
    <![endif]-->

<div id="items">
</div>

<script type="text/x-jsrender" id="itemnameheader">
    <div class="item-name">[[[Name]]]</div>
</script>
<script type="text/x-jsrender" id="descriptionheader">
    <div class="item-header">[[[Description]]]</div>
</script>
<script type="text/x-jsrender" id="categoryheader">
    <div class="item-header">[[[Category]]]</div>
</script>
<script type="text/x-jsrender" id="ownerheader">
    <div class="item-header">[[[Owner]]]</div>
</script>
<script type="text/x-jsrender" id="last-modified-header">
    <div class="item-header">[[[Last Modified]]]</div>
</script>
<script type="text/x-jsrender" id="data-rows-header">
    <div class="item-header">[[[Data Rows]]]</div>
</script>
<script type="text/x-jsrender" id="data-status-header">
    <div class="item-header">[[[Data Refresh Status]]]</div>
</script>
<script type="text/x-jsrender" id="description">
    <div class="item-description grid-content" title="{{:~renderDoubleQuotes(Description)}}" data-toggle="tooltip" data-placement="top">
        <span>
            {{:Description}}
        </span>
    </div>
</script>

<script type="text/x-jsrender" id="category">
    <span title="{{:CategoryName}}" data-toggle="tooltip" data-placement="top">
        {{:CategoryName}}
    </span>
</script>

<script type="text/x-jsrender" id="createdbydisplayname">
    <span title="{{:CreatedByDisplayName}}" data-toggle="tooltip" data-placement="top">
        {{:CreatedByDisplayName}}
    </span>
</script>

<script type="text/x-jsrender" id="modifieddate">
    <div title="{{:ModifiedDate}}" data-toggle="tooltip" data-placement="top">
        {{:ModifiedDate}}
    </div>
</script>


<script type="text/x-jsrender" id="itemname">
    {{if ItemType=="2"}}
    <div class="item-name no-left-margin grid-content" title="{{:Name}}" data-toggle="tooltip" data-placement="top">
        {{if ItemType=="2"}}
        <span><a href="{{:~urlEncode(CategoryName, Name)}}" target="_blank">{{:Name}}</a></span>
        {{else ItemType=="8"}}
        <span><a href="{{:~widgetUrlEncode(Name)}}" target="_blank">{{:Name}}</a></span>
        {{else ItemType=="1"}}
        <span><a href="@Url.Action("Dashboards", "Dashboards")?category={{:Name}}" target="_blank">{{:Name}}</a></span>
        @*{{else ItemType=="@((int)ItemType.File)"}}
            <span><a href="@UrlHelper.GenerateUrl("ItemDownload", "Download", "FileRender", null, RouteTable.Routes, HttpContext.Current.Request.RequestContext, false)/{{:ItemTypeString}}/{{:Name}}" target="_blank">{{:Name}}</a></span>*@
        {{else}}
        <span>{{:Name}}</span>
        {{/if}}
    </div>
    {{else}}
    <div class="item-name grid-content" title="{{:Name}}" data-toggle="tooltip" data-placement="top">
        {{if ItemType=="2"}}
        <span><a href="{{:~urlEncode(CategoryName, Name)}}" target="_blank">{{:Name}}</a></span>
        {{else ItemType=="8"}}
        <span><a href="{{:~widgetUrlEncode(Name)}}" target="_blank">{{:Name}}</a></span>
        {{else ItemType=="1"}}
        <span><a href="@Url.Action("Dashboards", "Dashboards")?category={{:Name}}" target="_blank">{{:Name}}</a></span>
        @*{{else ItemType=="@((int)ItemType.File)"}}
            <span><a href="@UrlHelper.GenerateUrl("ItemDownload", "Download", "FileRender", null, RouteTable.Routes, HttpContext.Current.Request.RequestContext, false)/{{:ItemTypeString}}/{{:Name}}" target="_blank">{{:Name}}</a></span>*@
        {{else ItemType=="@((int)ItemType.Datasource)" && IsDraft}}
        <span class="datasource-name">{{:Name}}</span>
        <span class="badge badge-secondary">[[[Draft]]]</span>
        {{else}}
        <span>{{:Name}}</span>
        {{/if}}
    </div>
    {{/if}}
</script>

<script type="text/x-jsrender" id="options">
    <div class="dropdown @(schemes != null && !schemes.ContextMenu ? "hide" : string.Empty)">
        <span class="dropdown-toggle option-icon" title="[[[Actions]]]" data-toggle="dropdown">
            <i class="su su-options"></i>
        </span>
        <ul class="dropdown-menu" role="menu">

            {{if CanDownload}}
            {{if ~checkMobile()}}
            {{if ItemType=="@((int)ItemType.File)"}}
            <li>
                <a href="javascript:void(0);" title="" ispublic="{{:IsPublic}}" data-itemtype="{{:ItemType}}" data-item-id="{{:Id}}" data-item-type="@(gridName)" data-name="{{:Name}}" class="get-link option-click" data-url="{{:~fileUrlEncode(Id)}}">
                    <i class="su su-link"></i>
                    <span>[[[Get Link]]]</span>
                </a>
            </li>
            {{/if}}
            {{/if}}

            {{if ItemType=="@((int)ItemType.File)"}}
            <li>
                @*<a href="@UrlHelper.GenerateUrl("ItemDownload", "Download", "FileRender", null, RouteTable.Routes, HttpContext.Current.Request.RequestContext, false)/{{:ItemTypeString}}/{{:Name}}" title="">
                <i class="su su-download"></i>
                <span>[[[Download Report]]]</span>
            </a>
            {{else ItemType=="@((int)ItemType.Dashboard)" }}
            <a href="@UrlHelper.GenerateUrl("DashboardDownload", "Download", "FileRender", null, RouteTable.Routes, HttpContext.Current.Request.RequestContext, false)/{{:CategoryName}}/{{:Name}}" title="">
                <i class="su su-download"></i>
                <span>[[[Download Dashboard]]]</span>
            </a>
            {{else}}*@
                @*<a href="@UrlHelper.GenerateUrl("ItemDownload", "Download", "FileRender", null, RouteTable.Routes, HttpContext.Current.Request.RequestContext, false)/{{:ItemTypeString}}/{{:Name}}" title="">
                <i class="su su-download"></i>
                <span>[[[Download]]]</span>
            </a>*@
            </li>
            {{/if}}
            {{/if}}

            {{if ~checkMobile()}}
            {{if @(permissionData[ItemType.Dashboard].ToString().ToLower()) == true && !IsDraft}}
            <li class="@(schemes != null && !schemes.CreateDashboard ? "hide" : string.Empty)">
                <a href="@Url.Action("DashboardDesigner", "Designer")?datasourceId={{:Id}}" target="_blank" class="create-dashboard-using-datasource" title="[[[Create dashboard using this Data Source]]]" data-itemname="{{:Name}}" data-item-id="{{:Id}}">
                    <i class="su su-nav-dashboard"></i>
                    <span>[[[Create Dashboard]]]</span>
                </a>
            </li>
            <li role="separator" class="divider @(schemes != null && !schemes.CreateDashboard ? "hide" : string.Empty)"></li>
            {{/if}}
            {{/if}}

            {{if CanWrite}}
            {{if ~checkMobile()}}
            {{if ItemType == "@((int)ItemType.Datasource)"}}
            <li class="@(schemes != null && !schemes.Edit ? "hide" : string.Empty)">
                <a href="@Url.Action("Index", "DataSourceDesigner")?datasourceId={{:Id}}" title="" target="_blank">
                    <i class="su su-edit"></i>
                    <span>[[[Edit Data Source]]]</span>
                </a>
            </li>
            {{if !IsDraft}}
            <li role="separator" class="divider @(schemes != null && !schemes.Edit ? "hide" : string.Empty)"></li>
            {{/if}}
            {{/if}}
            {{/if}}
            {{/if}}

            {{if ItemType == "@((int)ItemType.Datasource)" && !IsDraft}}
            <li class="@(schemes != null && !schemes.Preview ? "hide" : string.Empty)">
                <a href="javascript:void(0);" title="" id="item-preview" data-item-id="{{:Id}}">
                    <i class="su su-data-preview" style="padding: 0px 8px;">
                        <span class="su su-data-preview path1" style="font-size:14px"></span>
                    </i>
                    <span>[[[Preview Data]]]</span>
                </a>
            </li>
            <li role="separator" class="divider @(schemes != null && !schemes.Preview ? "hide" : string.Empty)"></li>
            {{/if}}

            {{if CanWrite}}
            {{if ~checkMobile()}}
            {{if ItemType == "@((int)ItemType.Datasource)" && DatasourceType =="@((int)ConnectionMode.Extract)" && !IsDraft}}
            <li class="@(schemes != null && !schemes.RefreshData ? "hide" : string.Empty)">
                <a href="javascript:void(0);" title="" class="refresh-data" data-itemname="{{:Name}}" data-item-id="{{:Id}}">
                    <i class="su su-refresh"></i>
                    <span>[[[Refresh Data]]]</span>
                </a>
            </li>
            {{/if}}
            {{/if}}
            {{/if}}

            {{if CanWrite}}
            {{if ~checkMobile()}}
            {{if ItemType == "@((int)ItemType.Datasource)" && DatasourceType =="@((int)ConnectionMode.Extract)" && !IsDraft}}
            <li class="@(schemes != null && !schemes.RefreshSetting ? "hide" : string.Empty)">
                <a href="javascript:void(0);" title="" class="edit-schedule" data-itemname="{{:Name}}" data-item-id="{{:Id}}">
                    <i class="su su-nav-schedule"></i>
                    <span>[[[Refresh Setting]]]</span>
                </a>
            </li>
            {{/if}}
            {{/if}}
            {{/if}}

            {{if CanWrite}}
            {{if ~checkMobile()}}
            {{if !IsDraft}}
            {{if ItemType == "@((int)ItemType.Datasource)" && DatasourceType =="@((int)ConnectionMode.Extract)"}}
            <li>
                <a href="javascript:void(0);" title="" class="refresh-history" data-itemname="{{:Name}}" data-item-id="{{:Id}}" data-itemtype="{{:ItemType}}">
                    <i class="su su-refresh-history"></i>
                    <span>[[[Refresh History]]]</span>
                </a>
            </li>
            <li role="separator" class="divider"></li>
            {{/if}}
            {{/if}}
            {{/if}}
            {{/if}}

            {{if !IsLocked}}
            {{if ~checkMobile()}}
            {{if CanCopy}}
            {{if DatasourceType=="@((int)ConnectionMode.Live)" && !IsDraft}}
            <li class="@(schemes != null && !schemes.Copy ? "hide" : string.Empty)">
                <a href="javascript:void(0);" title="" class="copyItem" data-action='Copy' data-itemId="{{:Id}}" data-itemname="{{:Name}}">
                    <i class="su su-copy"></i>
                    <span>[[[Copy Data Source]]]</span>
                </a>
            </li>
            <li role="separator" class="divider @(schemes != null && !schemes.Copy ? "hide" : string.Empty)"></li>
            {{/if}}
            {{/if}}
            {{/if}}
            {{/if}}

            {{if ~checkMobile()}}
            {{if (CreatedById==@(userId) || @(Convert.ToBoolean(Context.Session.GetString("IsAdmin")).ToString().ToLower()) == true) && !IsDraft}}
            {{if ItemType=="@((int)ItemType.File)"}}
            <li role="separator" class="divider @(schemes != null && !schemes.Share ? "hide" : string.Empty)"></li>
            {{/if}}
            <li class="@(schemes != null && !schemes.Share ? "hide" : string.Empty)">
                <a href="javascript:void(0);" class="item-permissions" title="" data-itemname="{{:Name}}" data-item-id="{{:Id}}">
                    <i class="su su-manage-permission"></i>
                    <span>[[[Sharing Permissions]]]</span>
                </a>
            </li>
            {{/if}}
            {{/if}}

            {{if @*CanDownload ||*@ CreatedById==@(userId) || @(Convert.ToBoolean(Context.Session.GetString("IsAdmin")).ToString().ToLower()) == true}}
            {{if !IsDraft}}
            <li role="separator" class="divider  @(schemes != null && !schemes.VersionHistory ? "hide" : string.Empty)"></li>
            {{/if}}
            {{/if}}

            {{if ~checkMobile()}}
            {{if !IsDraft}}
            <li class="@(schemes != null && !schemes.VersionHistory ? "hide" : string.Empty)">
                <a href="javascript:void(0);" class="version-button" title="" data-itemname="{{:Name}}" data-item-id="{{:Id}}">
                    <i class="su su-versions"></i>
                    <span>[[[Version History]]]</span>
                </a>
            </li>
            {{/if}}
            {{/if}}

            {{if ~checkMobile()}}
            {{if CanWrite || CanDelete || ItemType=="@((int)ItemType.Report)"}}
            {{/if}}
            {{/if}}
            {{if CanWrite}}
            {{if ~checkMobile()}}
            {{if ItemType=="@((int)ItemType.Dashboard)"}}
            <li role="separator" class="divider @(schemes != null && !schemes.UpdateDashboard ? "hide" : string.Empty)"></li>
            <li class="@(schemes != null && !schemes.UpdateDashboard ? "hide" : string.Empty)">
                <a href="javascript:void(0);" title="" class="item-edit" data-item-id="{{:Id}}">
                    <i class="su su-edit"></i>
                    <span>[[[Update Dashboard]]]</span>
                </a>
            </li>
            @*{{else}}
        <li>
            <a href="javascript:void(0);" title="" class="item-edit" data-item-id="{{:Id}}">
                <i class="su su-edit"></i>
                <span>[[[Update]]]</span>
            </a>
        </li>*@
            {{/if}}
            {{/if}}
            {{/if}}
            @*{{if CanWrite}}
        {{if ~checkMobile()}}
        {{if ItemType=="@((int)ItemType.Dashboard)"}}
        <li>
            <a href="javascript:void(0);" title="" class="update-datasource" data-item-id="{{:Id}}">
                <i class="su su-datasource"></i>
                <span>[[[Update Data Source(s)]]]</span>
            </a>
        </li>
        {{/if}}
        {{/if}}
        {{/if}}*@

            {{if ~checkMobile()}}
            {{if CanDelete}}
            <li role="separator" class="divider @(schemes != null && !schemes.Delete ? "hide" : string.Empty)"></li>
            <li class="@(schemes != null && !schemes.Delete ? "hide" : string.Empty)">
                {{if ItemType=="@((int)ItemType.Datasource)"}}
                <a href="javascript:void(0);" title="" class="item-delete" data-itemtype="{{:ItemType}}" data-item-id="{{:Id}}" data-name="{{:Name}}" data-datasource-type="{{:DatasourceType}}">
                    <i class="su su-delete"></i>
                    <span>[[[Delete]]]</span>
                </a>
                {{else}}
                <a href="javascript:void(0);" title="" class="item-delete" data-itemtype="{{:ItemType}}" data-item-id="{{:Id}}" data-name="{{:Name}}">
                    <i class="su su-delete"></i>
                    <span>[[[Delete]]]</span>
                </a>
                {{/if}}
            </li>
            {{/if}}
            {{/if}}
        </ul>
    </div>
</script>

<script type="text/x-jsrender" id="data-rows">
    {{if DatasourceType=="@((int)ConnectionMode.Extract)"}}
    <span title="{{:RowCount}}" data-toggle="tooltip" data-placement="top">
        {{:RowCount}}
    </span>
    {{else}}
    <span>&#45;</span>
    {{/if}}
</script>

<script type="text/x-jsrender" id="data-status">
    {{if DatasourceType=="@((int)ConnectionMode.Extract)"}}
    <div>
        {{if ScheduleStatus=="@((int)ScheduleStatus.Success)"}}
        <div>
            <span data-toggle="tooltip" data-placement="top" title="[[[Successful at]]] {{:LastAttemptAt}}">
                [[[Successful at]]] {{:LastAttemptAt}}
            </span>
        </div>
        {{else ScheduleStatus=="@((int)ScheduleStatus.Fail)"}}
        <div>
            <span data-toggle="tooltip" data-placement="top" title="[[[Failure at]]] {{:LastAttemptAt}}">
                [[[Failure at]]] {{:LastAttemptAt}}
            </span>
            {{if LastSuccessfulAttemptAt != null}}
            <div>
                <span data-toggle="tooltip" data-placement="top" title="[[[Last successful at]]] {{:LastSuccessfulAttemptAt}}">
                    [[[Last successful at]]] {{:LastSuccessfulAttemptAt}}
                </span>
            </div>
            {{else}}
            <div>
                <span data-toggle="tooltip" data-placement="top" title="[[[No successful refreshes]]]">
                    [[[No successful refreshes]]]
                </span>
            </div>
            {{/if}}
        </div>
        {{else ScheduleStatus=="@((int)ScheduleStatus.Run)"}}
        <div>
            <span data-toggle="tooltip" data-placement="top" title="[[[Refresh Started]]]">
                [[[Refresh Started]]]
            </span>
            {{if LastSuccessfulAttemptAt != null}}
            <div>
                <span data-toggle="tooltip" data-placement="top" title="[[[Last successful at]]] {{:LastSuccessfulAttemptAt}}">
                    [[[Last successful at]]] {{:LastSuccessfulAttemptAt}}
                </span>
            </div>
            {{/if}}
        </div>
        {{else}}
        <div>
            <span data-toggle="tooltip" data-placement="top" title="[[[Not refreshed yet]]]">
                [[[Not refreshed yet]]]
            </span>
        </div>
        {{/if}}
    </div>
    {{else DatasourceType=="@((int)ConnectionMode.ExtractWithoutRefresh)"}}
    <div>
        <span class="label label-default live-connection">[[[NA]]]</span>
    </div>
    {{else DatasourceType=="@((int)ConnectionMode.MergeDataSource)"}}
    <div>
        <span class="label label-default live-connection">[[[Combined Data Source]]]</span>
    </div>
    {{else}}
    <div>
        <span class="label label-success live-connection">[[[Live Connection]]]</span>
    </div>
    {{/if}}
</script>
<div id="ItemAction" title="[[[Item Actions]]]" class="no-padding"></div>
<div><iframe id="hiddeniframe" src="" style="display:none"></iframe></div>
<input type="hidden" id="applauncherinputhidden" style="width:0;margin:0;border:0;height:0; display:inherit" />

<script type="text/javascript" language="javascript">
    var gridName = $('#item-grid-container').attr("data-grid-name");
    var toolbarItems = [{ templateID: "#openTemplate" }, { templateID: "#openwithdashboarddesignerTemplate" }, { templateID: "#DownloadTemplate" }, { templateID: "#Separator1" }, { templateID: "#can-edit-template" }, { templateID: "#can-delete-template" }, { templateID: "#separator2" }, { templateID: "#move-template" }, { templateID: "#copy-template" }, { templateID: "#clone-template" }, { templateID: "#separator3" }, { templateID: "#schedule-template" }, { templateID: "#Separator4" }, { templateID: "#VersionTemplate" }];
    var categoryName = "@Context.Request.Query["categoryName"]".toString();
    var filters = { filterType: "menu" };
    if (gridName == "dashboards" && categoryName != "") {
        var filters = { filterType: "menu", "filteredColumns": [{ field: "CategoryName", operator: "equal", value: categoryName }] };
    }
    if ("@query" != "") {
         var gridObj = $("#items").data("ejGrid");
         var filters = { filterType: "menu", "filteredColumns": [{ field: "Name", operator: "equal", value: "@query" }] };
    }


    $(document).ready(function () {
        ej.support.enableLocalizedSort = true;
        $("#items").ejGrid({
            dataSource: ej.DataManager({ url: "@Url.Action("GetItems", (string)gridName)", adaptor: "UrlAdaptor" }),
            gridLines: ej.Grid.GridLines.None,
            allowPaging: true,
            pageSettings: { pageSize: 20 },
            allowSorting: true,
            enableAltRow: false,
            allowSearching: true,
            allowFiltering: true,
            allowSelection: true,
            filterSettings: filters,
            actionBegin: "fnActionBegin",
            actionComplete: "fnActionComplete",
            rowSelecting: function (args) {
                if (args.target.hasClass("favoriteItem")) {
                    args.cancel = true;
                }
            },
            rowDataBound: function () {
                var height = $(".e-gridcontent").height();
                if (height != null) {
                    rowBound();
                }
            },
            dataBound: function (args) {
                if (location.pathname.toLowerCase() === "/" || location.pathname.split("/")[location.pathname.split("/").length - 1].toLowerCase() == "dashboards") {
                    refreshScroller();
                }
                $('[data-toggle="tooltip"]').tooltip();
            },
            enableRowHover: true,
            columns: [
                {
                    headerText: "[[[Name]]]",
                    template: true,
                    headerTemplateID: "#itemnameheader",
                    templateID: "#itemname",
                    field: "Name",
                    cssClass: gridName == "dashboards" ? "align-name" : "",
                    width: ("@isMobile.ToString().ToLower()" == "false" && (window.innerWidth > 1200)) ? 55 : 80,
                    type: "string",
                    allowFiltering: true
                },
                {
                    headerText: "[[[Description]]]",
                    width: gridName == "datasources" ? 70 : 120,
                    template: true,
                    headerTemplateID: "#descriptionheader",
                    field: "Description",
                    templateID: "#description",
                    type: "string",
                    allowFiltering: true,
                    visible: ("@isMobile.ToString().ToLower()" == "false" && (window.innerWidth > 1040))
                },
                {
                    headerText: "[[[Category]]]",
                    width: 70,
                    field: "CategoryName",
                    headerTemplateID: "#categoryheader",
                    visible: (("@isMobile.ToString().ToLower()" == "false") && (window.innerWidth > 1040) && (gridName == "dashboards")),
                    allowFiltering: true,
                    template: true,
                    templateID: "#category",
                    type: "string"
                },
                {
                    headerText: "[[[Owner]]]",
                    width: (window.innerWidth > 1200) ? 70 : 50,
                    headerTemplateID: "#ownerheader",
                    field: "CreatedByDisplayName",
                    visible: ("@isMobile.ToString().ToLower()" == "false" && (window.innerWidth > 1200)),
                    allowFiltering: true,
                    template: true,
                    templateID: "#createdbydisplayname",
                    type: "string"
                },
                {
                    headerText: "[[[Last Modified]]]",
                    width: gridName == "datasources" ? 50 : 70,
                    field: "ModifiedDate",
                    visible: ("@isMobile.ToString().ToLower()" == "false" && (window.innerWidth > 1200)),
                    template: true,
                    headerTemplateID: "#lastmodifiedheader",
                    templateID: "#modifieddate",
                    allowFiltering: false
                },
                {
                    headerText: "[[[Data Refresh Status]]]",
                    width: 70,
                    field: "ModifiedDate",
                    visible: ("@isMobile.ToString().ToLower()" == "false" && (window.innerWidth > 1200) && (gridName == "datasources")),
                    template: true,
                    headerTemplateID: "#data-status-header",
                    templateID: "#data-status",
                    allowFiltering: false
                },
                {
                    template: true,
                    templateID: "#options",
                    width: (window.innerWidth > 1200) ? 15 : 25,
                    allowFiltering: false,
                    allowSorting: false
                }
            ]
        });

        $.views.helpers({
            urlEncode: function (category, item) {
                return encodeURI("@Url.Action("Index", "FileRender")/" + category + "/" + item);
            },
            widgetUrlEncode: function (item) {
                return encodeURI("@Url.Action("widgets", "FileRender")/" + item);
            },
            fileUrlEncode: function (item) {
                return encodeURI("@Url.Action("Download", "Files")/" + item + "?compress=true");
            },
            checkMobile: function () {
                return ("@isMobile.ToString().ToLower()" == "false" && (window.innerWidth > 1040));
            },
            checkTablet: function () {
                return window.innerWidth > 900;
            },
            renderDoubleQuotes: function (inputString) {
                return inputString.replace(new RegExp("\"", 'g'), '&quot;');
            }
        });
    });
</script>